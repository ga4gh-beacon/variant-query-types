{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"genomic-coordinates-mappings/","title":"Genomic Coordinates and Mappings","text":"<p>GA4GH Beacon Genome Coordinate Use Recommendation<sup>1</sup></p> <ul> <li>Beacon recommends the use of a \"0-start, half-open\" (interbase) coordinate   system</li> <li>\"1-start, fully-closed\" should be used when displaying coordinates through   a Beacon GUI</li> </ul>"},{"location":"genomic-coordinates-mappings/#variant-normalization","title":"Variant normalization","text":"<p>The Beacon v2 specification does not prescribe which style of variant normalization sequence defined queries are based on. In practice usually the VCF model is assumed (parsimony with avoidance of empty alleles). However, the GA4GH VRS specification argues against this practice and recommends a fully justified normalization<sup>2</sup>.</p> <p>Beacon Scouts To Do</p> <p>The Beacon Variant Scouts team will work on documenting a recommended variant normalization format which might deviate from current practices.</p> <ol> <li> <p>Source: @andrewyatz at GenomeStandards \u21a9</p> </li> <li> <p>VRS normalization rules as design decision: Alleles are Fully Justified \u21a9</p> </li> </ol>"},{"location":"query-solutions/","title":"Use Case Examples","text":"<p>Auto-generated Examples</p> <p>We are moving to a system where examples are auto-generated from the YAML example files in the source tree instead of maintaining separate descriptions. The examples below (though correct) will be replaced with the new system soon.</p>"},{"location":"query-solutions/#mature-working-examples-for-beacon-v2","title":"Mature, working examples for Beacon v2","text":"<p>The current version of query examples for the Beacon v2 parameters (i.e. not using additional parameters beyond the specification) can be found in  Beacon v2 Examples.</p>"},{"location":"query-solutions/#any-deletions-involving-the-tp53-gene-locus","title":"Any deletion(s) involving the TP53 gene locus","text":"Using <code>VariantRangeRequest</code> <p>The query can be created by using the maximum extent of the TP53 coding region (optionally extended for functionally relevent elements, e.g. promotor), and a <code>variantType</code> parameter supported by the implementation. The interpretation of \"any deletion\" is not straightforward; this would potentially include small INDELS specified as sequence alterations as well as copy number deletions.</p> <p>Recommendation Implementers should provide a mechanism to match any \"deletion\" <code>variantType</code> (<code>EFO:0030067</code>, <code>DEL</code>, <code>SO:0001743</code>) independent of size since operational definitions of <code>CNV</code> vs. <code>INDEL</code> vary, and use explicit <code>variantMinLength</code>, <code>variantMaxLength</code> parameters if needed.</p> <pre><code>?referenceName=NC_0000017.11&amp;start=7669608&amp;end=7676593&amp;variantType=EFO:0030067\n</code></pre> Using <code>GeneRequest</code> <p>For the interpretation of the \"deletion\" parameter see above.</p> <pre><code>?geneId=TP53&amp;variantType=EFO:0030067\n</code></pre>"},{"location":"query-solutions/#insertion-event-in-gene-tp53-177669607-7676593-or-in-close-proximity-5000bp","title":"Insertion event in gene TP53 (17:7669607-7676593) or in close proximity (\u00b1~5000bp)","text":"Using <code>VariantRangeRequest</code> <p>For this query the mapping position of TP53 (17:7669607-7676593) has to be known. Usually this knowledge would be provided by a front end helper and the aditional padding added manually or w/ a helper field (if frequent scenario) and the beacon itself would just receive the positional range request.</p> <p>The \"insertion\" type is here provided through the Sequence Ontology term <code>SO:0000667</code> and for the chromosome the full, prefixed RefSeq term is being used.</p> <pre><code>?referenceName=refseq:NC_000017.11&amp;start=7664000&amp;end=7682000&amp;variantType=SO:0000667\n</code></pre>"},{"location":"query-solutions/#copy-number-gains-involving-the-whole-locus-chr254700000-63900000","title":"Copy number gains involving the whole locus chr2:54,700,000-63,900,000","text":"Using <code>VariantBracketRequest</code> <p>The query has to indicate the involved genomic region by positions as well as the type of change. Here, matched duplication events start 5` of the region and end 3` of it. For capturing any event upt to the complete chromosome duplication this requires knowledge about the maximum value (i.e. chromosome base length; using a random very large number might fail depending on the implementation).</p> <p>The example uses <code>EFO:0030070</code> for <code>copy number gain</code> instead of the alternative <code>SO:0001742</code> <code>copy_number_gain</code> as the preferred since the EFO terms provide a more granular expressivity and are referenced in the VRS definitions.</p> <pre><code>?referenceName=refseq:NC_000002.12&amp;start=0,54700000&amp;end=63900000,242193529&amp;variantType=EFO:0030070\n</code></pre>"},{"location":"query-solutions/#examples-for-beacon-vqs","title":"Examples for Beacon VQS","text":"<p>The following examples are using additional parameters beyond the Beacon v2 specification and should be considered for discussion only. The generated list can be found in  Beacon VQS Examples.</p>"},{"location":"terms-and-values/","title":"Recommended Ternminologies and Example Values","text":"<p>Beyond single beacons or managed beacon networks the use of common, widely supported and standardized query values is of special importance to empower federated queries. The main examples relevant to variation queries here are <code>referenceName</code> and <code>variantType</code>. </p> <p>Value Definitions in the Beacon Schemas</p> <p>In most of its schemas the Beacon v2 specification is not prescriptive in the specific values permitted for individual parameters and provides a number of legacy values as examples in its inline documentation. This was thought to promote flexibility (e.g. non-human use cases) and simple adoption (e.g. reusing VCF terms).</p> <p>Beacon Scouts To Do</p> <p>We will add and document recommended termionologies and use case examples during the 2024/2025 Beacon Variation Scouts process.</p>"},{"location":"terms-and-values/#vrsification-and-value-definitions","title":"VRSification and value definitions","text":"<p>Due to the adoption of VRS concepts already recommendations for some values can be provided.</p>"},{"location":"terms-and-values/#referencename-v1v2-and-referencesequence-v2plusvqs","title":"<code>referenceName</code> (v1/v2) and <code>referenceSequence</code> (v2plus/VQS)","text":"<p>Reference names (<code>referenceName</code>) in Beacon v1/v2 allow versioned and unversioned formats and use an <code>assemblyId</code> to specify the reference genome.</p>"},{"location":"terms-and-values/#recommendation","title":"Recommendation","text":"<ol> <li>use of un-prefixed chromosome names (e.g. <code>1</code>, <code>17</code>, <code>X</code>) for human genomes   together with an <code>assemblyId</code> (e.g. <code>GRCh38</code>), OR</li> <li>use of prefixed Refseq chromosome names (e.g. <code>refseq:NC_000001.11</code>)</li> </ol> <p>From experience with current practices the use of option 1 seems more widespread and - while implementations should be able to disambiguate and remap - recommended over option 2.</p> <pre><code>?referenceName=17&amp;assemblyId=GRCh38\n</code></pre> <p>Moving forward the Beacon v2+ specification will adopt the VRS <code>referenceSequence</code> which uses the Refget definitions and include the prefixed Refseq chromosome id use as option.</p> <pre><code>?referenceSequence=refseq:NC_000017.11\n</code></pre>"},{"location":"terms-and-values/#varianttype-v1v2-and-copychange-vqs","title":"<code>variantType</code> (v1/v2) and <code>copyChange</code> (VQS)","text":"<p>In Beacon v1/v2 the <code>variantType</code> parameter is a free text field and can be used to scope queries for specific types of genomic variations. It is very permissive and ambigouos, with frequent use of VCF terms but also other such as from <code>SO</code> and <code>EFO</code>.</p> <p>With the current move of the Beacon v2+ specification towards the use of the VRS concepts the future of a general <code>variantType</code> equivalent for variation queries has yet to be determined. However, VRS v2 provides a dedicated <code>copyChange</code> parameter as well as a dedicated vocabulary derived from EFO terminology.</p>"},{"location":"terms-and-values/#recommendation_1","title":"Recommendation","text":"<ul> <li>for CNV queries use the EFO terms for relative copy number changes for either   <code>copyChange</code> or <code>variantType</code> parameters, depending on the Beacon version</li> <li>in Beacon v2+ the <code>copyChange</code> parameter MUST use a primaryCode representing one of:<ul> <li>EFO:0030069: complete genomic loss    </li> <li>EFO:0020073: high-level loss    </li> <li>EFO:0030068: low-level loss    </li> <li>EFO:0030067: loss    </li> <li>EFO:0030064: regional base ploidy    </li> <li>EFO:0030070: gain    </li> <li>EFO:0030071: low-level gain    </li> <li>EFO:0030072: high-level gain    </li> </ul> </li> <li>for other types of variations <code>variantType</code> according to query documentation and   emerging examples</li> <li><code>variantType</code> might be replaced during future development</li> </ul>"},{"location":"variant-scouts-home/","title":"Beacon Variant Scouts","text":"<p>Variant Query Types and Components</p> <p>The Beacon protocol has demonstrated the general feasibility of federated queries and aggregated responses for genomic sequence variations, over distributed and disparate resources when supporting a common protocol. The final Beacon v1 standard added the option to query some for some types of structural variations - notably CNVs; and during the design of the Beacon v2 standard a \"Variant Scouts\" group documented an extended set of supported query patterns, while the development team implemented the necessary parameters (such as aminoacidAlteration, variantMaxLength, geneId\u2026)  into the Beacon default data model. However, several aspects had to be left open or have arisen since the original definitions - frequently not concerning necessary query parameter extensions but rather definition of standardized vocabularies and usage practices.</p> <p>The Beacon Varians Scouts work will focus on:</p> <ul> <li>Establishing an extended set of use case driven variant query needs and document how to express them through current Beacon parameters</li> <li>Suggesting extensions to the current specification where use cases, after triage against borderline scenarios and with a conservative view towards extending the vocabulary</li> <li>Document recommended vocabularies and standards (e.g. for <code>variantType</code> or <code>referenceName</code>)</li> <li>Develop use cases into typed queries (e.g. deletion, fusion, translocation request) implemented through schema documents, following the previous points</li> <li>Evaluate solutions for scenarios requiring identification of compound variants</li> </ul> <p>The outcome of this scout would be a document summarising points 1-3, and building on the previous Genomic variants document. It could, for example, take the form of a submitted article. Importantly, we envision that the group - in coordination with other standards groups from GA4GH and beyond - will provide solid \"variant query standard blocks\" - not necessarily limited to Beacon implementations; thereby providing an overarching harmonization of federated variant discovery tools and implementations.</p>"},{"location":"variant-scouts-home/#vrsification","title":"VRSification","text":"<p>From ongoing Beacon Scouts work and coordination with the Genomic Knowledge Standards work stream we have come to the overall agreement that future Beacon variant standards and queries will adopt the VRS v2+ standard to the largest extent possible. In reality this (probably) translates into </p> <ul> <li>Beacon v2+ inlining or referencing VRS schemas</li> <li>variant queries using VRS terms and structures or referring to them (since query   parameters might require different structures from definition parameters)</li> </ul> <p>We've started to refer to the developing VRSified query options as \"VQS\" (Variation Query Standard).</p>"},{"location":"variant-scouts-home/#material-references","title":"Material &amp; References","text":"<ul> <li>Beacon v2 Variant Queries documentation</li> <li>Previous Beacon Scouts: Genomic Variants Use Cases &amp; Examples</li> <li> <p>VRS data model</p> </li> <li> <p>ELIXIR hCNV CNV type comparison matrix</p> </li> <li>Experimental Factor Ontology CNVs</li> <li>Sequence Ontology sequence_variant</li> </ul>"},{"location":"variant-types/","title":"Genomic Variation Types","text":"<p>The specific meaning of variation terms varies between different terminologies, file standards and biomedical domains. Here we address such ambiguities through the documentation of overarching concepts (e.g. \"genomic deletions\") and the different flavours of their manifestations.</p> <p>Under Construction</p> <p>This page is currently under construction and will be updated with the types of variants supported in teh different Beacon flavours.</p> <p>Currently (February 2025, towards GA4GH Connect 2025) there is rapid development which is reflected in the version specific pages:</p> <ul> <li>Beacon v2 Query Solutions for demonstrating options provided by Beacon v2</li> <li>Beacon v2+ Query Proposals for proposed parameters and solutions in a Beacon v2+ \"Variant Query Standard\" VQS</li> </ul> <p>For additional background see the previous Beacon Scouts: Genomic Variants Use Cases &amp; Examples.</p>"},{"location":"generated/requestParameterComponents/","title":"Request Parameter Definitions","text":"<p>Component definitions for <code>requestProfiles</code>. The definition of each parameter as a component allows for reuse across multiple request patterns but also for e.g. easy referencing in OpenAPI endpoints.</p>"},{"location":"generated/requestParameterComponents/#adjacencyaccession","title":"<code>AdjacencyAccession</code>","text":""},{"location":"generated/requestParameterComponents/#description","title":"Description","text":"<p>A GA4GH RefGet identifier for the adjacent sequence in adjacency/fusion scenarios.    </p>"},{"location":"generated/requestParameterComponents/#definitions","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>$ref</code>: <code>#/$defs/RefgetAccession</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#adjacencystart","title":"<code>AdjacencyStart</code>","text":""},{"location":"generated/requestParameterComponents/#description_1","title":"Description","text":"<p>Start position or range (i.e. in case of a fuzzy breakpoint) on an adjacent sequence in case of a sequence adjecency      </p> <p>Status:  </p> <ul> <li>PROPOSED FOR BEACON v2.n  </li> <li>based on VRS v2 with modification    </li> </ul>"},{"location":"generated/requestParameterComponents/#definitions_1","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>oneOf</code>:     </p> <ul> <li><code>integer</code> </li> <li><code>$ref: #/$defs/Range</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#adjacencyend","title":"<code>AdjacencyEnd</code>","text":""},{"location":"generated/requestParameterComponents/#description_2","title":"Description","text":"<p>End position or range (i.e. in case of a fuzzy breakpoint) on an adjacent sequence in case of a sequence adjecency      </p> <p>Status:  </p> <ul> <li>PROPOSED FOR BEACON v2.n  </li> <li>based on VRS v2 with modification    </li> </ul>"},{"location":"generated/requestParameterComponents/#definitions_2","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>oneOf</code>:     </p> <ul> <li><code>integer</code> </li> <li><code>$ref: #/$defs/Range</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#aminoacidchange","title":"<code>AminoacidChange</code>","text":""},{"location":"generated/requestParameterComponents/#description_3","title":"Description","text":"<p>Aminoacid alteration of interest in 1 letter format.      </p> <p>Origin: Beacon v2.0    </p>"},{"location":"generated/requestParameterComponents/#definitions_3","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v2.0</code> </li> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>examples</code>:     </p> <ul> <li><code>V600E</code> </li> <li><code>M734V</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#copychange","title":"<code>CopyChange</code>","text":""},{"location":"generated/requestParameterComponents/#description_4","title":"Description","text":"<p>MUST use a primaryCode representing one of:  </p> <ul> <li>EFO:0030069: complete genomic loss      </li> <li>EFO:0020073: high-level loss      </li> <li>EFO:0030068: low-level loss      </li> <li>EFO:0030067: loss      </li> <li>EFO:0030064: regional base ploidy      </li> <li>EFO:0030070: gain      </li> <li>EFO:0030071: low-level gain      </li> <li>EFO:0030072: high-level gain    </li> </ul> <p>Endpoints are expected to provide query expansion according to the hierarchy of the terms:  </p> <pre><code>- EFO:0030064  \n- EFO:0030067  \n    |- EFO:0030068  \n    \\- EFO:0020073  \n         \\- EFO:0030069  \n- EFO:0030070  \n    |- EFO:0030071  \n    \\- EFO:0030072  \n</code></pre> <p>Origin: Beacon v2.n, based on VRS v1.3+    </p>"},{"location":"generated/requestParameterComponents/#definitions_4","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>enum</code>:     </p> <ul> <li><code>EFO:0030069</code> </li> <li><code>EFO:0020073</code> </li> <li><code>EFO:0030068</code> </li> <li><code>EFO:0030067</code> </li> <li><code>EFO:0030064</code> </li> <li><code>EFO:0030070</code> </li> <li><code>EFO:0030071</code> </li> <li><code>EFO:0030072</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#geneid","title":"<code>GeneId</code>","text":""},{"location":"generated/requestParameterComponents/#description_5","title":"Description","text":"<ul> <li>A gene identifier  </li> <li>It is strongly suggested to use a symbol following   the HGNC (www.genenames.org) nomenclature.  </li> </ul> <p>Origin: Beacon v2.0    </p>"},{"location":"generated/requestParameterComponents/#definitions_5","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v2.0</code> </li> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>examples</code>:     </p> <ul> <li><code>BRAF</code> </li> <li><code>SCN5A</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#genomicfeature","title":"<code>GenomicFeature</code>","text":""},{"location":"generated/requestParameterComponents/#description_6","title":"Description","text":"<p>Descriptor of the class of genomic feature affected by the variant. Values from SO (Sequence ontology) are recommended, e.g.  </p> <ul> <li><code>SO:0001623</code> for 5 prime UTR variants  </li> <li><code>SO:0000605</code> for intergenic variants  </li> </ul> <p>Note: While genes are features in SO they have a distinct parameter <code>geneId</code>.    </p>"},{"location":"generated/requestParameterComponents/#definitions_6","title":"Definitions","text":"<ul> <li><code>type</code>: <code>string</code> </li> </ul>"},{"location":"generated/requestParameterComponents/#genomicalleleshortform","title":"<code>GenomicAlleleShortForm</code>","text":""},{"location":"generated/requestParameterComponents/#description_7","title":"Description","text":"<p>HGVSId descriptor  </p> <p>Origin: Beacon v2.0    </p>"},{"location":"generated/requestParameterComponents/#definitions_7","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v2.0</code> </li> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>examples</code>:     </p> <ul> <li><code>NM_004006.2:c.4375C&gt;T</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#moleculareffect","title":"<code>MolecularEffect</code>","text":""},{"location":"generated/requestParameterComponents/#description_8","title":"Description","text":"<p>Desscriptor of the molecular consequence generated by the variant. Use of Ontology terms from SO (Sequence Ontology) are recommended, e.g.   </p> <ul> <li><code>SO:0001583</code> for finding missense variants  </li> <li><code>SO:0001580</code> for finding changes the coding sequence  </li> <li><code>SO:0001587</code> for finding variants with a gained stop codon  </li> </ul> <p>The logical path for matching to the Beacon v2 model here would be  <code>genomicVariations.molecularAttributes.molecularEffects.id</code>.    </p>"},{"location":"generated/requestParameterComponents/#definitions_8","title":"Definitions","text":"<ul> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>examples</code>:     </p> <ul> <li><code>SO:0001583</code> </li> <li><code>SO:0001580</code> </li> <li><code>SO:0001587</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#range","title":"<code>Range</code>","text":""},{"location":"generated/requestParameterComponents/#description_9","title":"Description","text":"<p>An array of 2 integer values. If referring to sequence positions the \"0-based, inclusive\" format is used.    </p>"},{"location":"generated/requestParameterComponents/#definitions_9","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>array</code> </p> </li> <li><code>items</code>:    <ul> <li><code>type</code>: <code>integer</code> </li> <li><code>minimum</code>: <code>0</code> </li> <li><code>minItems</code>: <code>2</code> </li> <li><code>maxItems</code>: <code>2</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#refgetaccession","title":"<code>RefgetAccession</code>","text":""},{"location":"generated/requestParameterComponents/#description_10","title":"Description","text":"<p>A GA4GH RefGet identifier for the reference sequence, i.e. either a computed GA4GH checksum or other unique namespaced identifier supported by the server. It replaces the <code>referenceName</code> and <code>assemblyId</code> parameters according to the VRS v2 definition.  </p> <p>Origin: VRS v2  </p> <p>Reference: GA4GH RefGet </p>"},{"location":"generated/requestParameterComponents/#definitions_10","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>examples</code>:     </p> <ul> <li><code>refseq:NC_000009.12</code> </li> <li><code>ga4gh:SQ.S_KjnFVz-FE7M0W6yoaUDgYxLPc1jyWU</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#repeatsubunitlength","title":"<code>RepeatSubunitLength</code>","text":""},{"location":"generated/requestParameterComponents/#description_11","title":"Description","text":"<p>The number of residues in a repeat subunit. In contrast to the VRS model we allow for range queries (e.g. all repeats with subunits of 1 or 2).  </p> <p>Origin: VRS v2    </p>"},{"location":"generated/requestParameterComponents/#definitions_11","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>oneOf</code>:     </p> <ul> <li><code>integer</code> </li> <li><code>$ref: #/$defs/Range</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#requestprofileid","title":"<code>RequestProfileId</code>","text":""},{"location":"generated/requestParameterComponents/#description_12","title":"Description","text":"<p>The <code>requestProfile</code> parameter here allows beacons to check the type of query being performed and to compare the provided request parameters for conformity with the expected query profile. The parameter definition here is a placeholder; the definitions of typed queries will use constant values for their <code>requestProfile</code> parameter.  </p> <p>Origin: Beacon v2+    </p>"},{"location":"generated/requestParameterComponents/#definitions_12","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#sequence","title":"<code>Sequence</code>","text":""},{"location":"generated/requestParameterComponents/#description_13","title":"Description","text":"<p>DNA bases.      </p> <ul> <li>Accepted values: <code>[ACGTN]*</code> </li> <li>N is a wildcard, that denotes the position of any base,   and can be used as a standalone base of any type or within a partially known   sequence. As example, a query of <code>ANNT</code> the Ns can take take any form of [ACGT]   and will match <code>ANNT</code>, <code>ACNT</code>, <code>ACCT</code>, <code>ACGT</code> ... and so forth.      </li> </ul> <p>Origin: VRS v1.n  </p> <p>TODO: Review use of base characters.    </p>"},{"location":"generated/requestParameterComponents/#definitions_13","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#sequencelength","title":"<code>SequenceLength</code>","text":""},{"location":"generated/requestParameterComponents/#description_14","title":"Description","text":"<p>The sequence length when querying the conceptual representation of a sequence according to a VRS <code>ReferenceLengthExpression</code> class.  </p> <p>Additionally, the <code>sequenceLength</code> parameter can be used to limit the length of matched variants, e.g. by specifying a range of lengths for <code>copyChange</code> matches.  </p> <p>Origin: VRS v2    </p>"},{"location":"generated/requestParameterComponents/#definitions_14","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>oneOf</code>:     </p> <ul> <li><code>integer</code> </li> <li><code>$ref: #/$defs/Range</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#sequencestart","title":"<code>SequenceStart</code>","text":""},{"location":"generated/requestParameterComponents/#description_15","title":"Description","text":"<p>Start position or range (i.e. in case of a fuzzy breakpoint) on a sequence. Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification    </p>"},{"location":"generated/requestParameterComponents/#definitions_15","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>oneOf</code>:     </p> <ul> <li><code>integer</code> </li> <li><code>$ref: #/$defs/Range</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#sequenceend","title":"<code>SequenceEnd</code>","text":""},{"location":"generated/requestParameterComponents/#description_16","title":"Description","text":"<p>End position or range (i.e. in case of a fuzzy breakpoint) on a sequence. Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification    </p>"},{"location":"generated/requestParameterComponents/#definitions_16","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>oneOf</code>:     </p> <ul> <li><code>integer</code> </li> <li><code>$ref: #/$defs/Range</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#variantid","title":"<code>VariantId</code>","text":""},{"location":"generated/requestParameterComponents/#description_17","title":"Description","text":"<ul> <li>A variant identifier such as a VRSid, ClinVar id, dbSNP rsID or a   COSMIC identifier  </li> <li>In the default data model this query parameter corresponds to <code>identifiers.variantAlternateIds</code> but potentially can map to other   identifiers as well. However, no specific query parameterwas defined   in the Beacon v2 default model. Status: PROPOSED FOR BEACON v2.n    </li> </ul>"},{"location":"generated/requestParameterComponents/#definitions_17","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>examples</code>:     </p> <ul> <li><code>ClinGen:CA152954</code> </li> <li><code>dbSNP:rs587780345</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#vrstype","title":"<code>VRStype</code>","text":""},{"location":"generated/requestParameterComponents/#description_18","title":"Description","text":"<p>Type of the variation according to the VRS model. Examples are here e.g. <code>Adjacency</code> or <code>Allele</code>. Origin: VRS v2    </p>"},{"location":"generated/requestParameterComponents/#definitions_18","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>VQS</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>enum</code>:     </p> <ul> <li><code>Adjacency</code> </li> <li><code>Allele</code> </li> <li><code>CisPhasedBlock</code> </li> <li><code>CopyNumberChange</code> </li> <li><code>CopyNumberCount</code> </li> <li><code>DerivativeMolecule</code> </li> <li><code>Terminus</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#assembly","title":"<code>Assembly</code>","text":""},{"location":"generated/requestParameterComponents/#description_19","title":"Description","text":"<p>Genomic assembly accession and version as RefSqeq assembly accession (e.g. \"GCF_000001405.39\") or a versioned assembly name or synonym such as UCSC Genome Browser assembly (e.g. \"hg38\") or Genome Reference Consortium Human (e.g. \"GRCh38.p13\") names. DEPRECATION NOTE: The use of a assembly specific sequence identifier obviates this parameter. Not part of VRS v2 aligned model versions.    </p>"},{"location":"generated/requestParameterComponents/#definitions_19","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>example</code>:     </p> <ul> <li><code>GCF_000001405.39</code> </li> <li><code>hg38</code> </li> <li><code>GRCh38.p13</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#refseqid","title":"<code>RefSeqId</code>","text":""},{"location":"generated/requestParameterComponents/#description_20","title":"Description","text":"<p>Reference sequence id for genomic reference sequence in which variant coordinates are given, e.g. \"refseq:NC_000009.12\" for human chromosome 9 in the GRCh38 assembly. The use of the assembly specific RefSeqId is recommended although alternatively names, synonymous or aliases e.g. \"chr9\" could be used in conjunction with an <code>Assembly</code> parameter. DEPRECATION NOTE: To be replaced with the <code>RefgetAccession</code> from VRS v2.    </p>"},{"location":"generated/requestParameterComponents/#definitions_20","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>example</code>:     </p> <ul> <li><code>refseq:NC_000009.12</code> </li> <li><code>chr9</code> </li> <li><code>NC_012920.1</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#referencebases","title":"<code>ReferenceBases</code>","text":""},{"location":"generated/requestParameterComponents/#description_21","title":"Description","text":"<p>The reference bases for the variant at the indicated position. It is based on the VCF concept of having (anchored) reference bases at an indicated genomic location in combination with <code>alternateBases</code> to define their replacement. In contrast, standards such as GA4GH VRS only indicate the <code>sequence</code> observed at a given base position, including the use of an empty sequence together with <code>start</code> + <code>end</code> positions with <code>end - start &gt; 0</code> to indicate deletions. Origin: VCF derived (optional) use in Beacon v0.3 -&gt; v2.1 Status: LEGACY    </p>"},{"location":"generated/requestParameterComponents/#definitions_21","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>$ref</code>: <code>#/$defs/Sequence</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#alternatebases","title":"<code>AlternateBases</code>","text":""},{"location":"generated/requestParameterComponents/#description_22","title":"Description","text":"<p>The bases of a sequence variant at a given position differing from the reference sequence, as defined by the <code>referenceBases</code> parameter. Please see <code>refereenceBases</code> for further information. Origin: VCF derived use in Beacon v0.3 -&gt; v2.1 Status: LEGACY    </p>"},{"location":"generated/requestParameterComponents/#definitions_22","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>$ref</code>: <code>#/$defs/Sequence</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#varianttype","title":"<code>VariantType</code>","text":""},{"location":"generated/requestParameterComponents/#description_23","title":"Description","text":"<p>The <code>variantType</code> is used to query variants which are not defined through a sequence of one or more bases using the <code>alternateBases</code> parameter. This VCF derived parameter is being replaced by the more specific VRS derived parameters such as <code>copyChange</code>. (Legacy) Examples here are e.g. structural variants:  DUP   - increased allelic count of material from the genomic region between <code>start</code> and <code>end</code> positions   - no assumption about the placement of the additional sequences is being     made (i.e. no in situ requirement as tandem duplications)  DEL: deletion of sequence following <code>start</code> </p> <p>In contrast to the updated VRS based v2.n parameters such as <code>copyChange</code> the Beacon v1.1 -&gt; v2.1 query model is not prescriptive with regard to the values allowed for <code>variantType</code> with use of extended types (e.g. <code>EFO:0030063</code>) being permitted. However, a support for the basic CNV types above - where represented in the data - is recommended. Status: LEGACY with potential use in v2.n for non-CNV parameters  Note: The VRS v2 <code>copyChange</code> is now a partial and more specific replacement       over <code>variantType</code> for copy number variations. However, additional       concepts so far have not been covered and might warrant use of an       additional parameter (<code>variantClass</code>?).    </p>"},{"location":"generated/requestParameterComponents/#definitions_23","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>string</code> </p> </li> <li> <p><code>examples</code>:     </p> <ul> <li><code>EFO:0030070</code> </li> <li><code>DUP</code> </li> <li><code>DEL</code> </li> <li><code>EFO:0030069</code> </li> </ul> </li> </ul>"},{"location":"generated/requestParameterComponents/#start","title":"<code>Start</code>","text":""},{"location":"generated/requestParameterComponents/#description_24","title":"Description","text":"<p>NOTE: This parameter will be potentially replaced by the VRS based definition       which uses either an integer or a Range (2 integers) in contrast to       the use of an array with 1 or 2 integers here. The difference lies in        the format of \"1 integer array\" versus \"1 integer\". Precise or fuzzy start coordinate position(s), allele locus (0-based, inclusive).  </p> <ul> <li><code>start</code> only:  </li> <li>for single positions, e.g. the start of a specified sequence     alteration where the size is given through the specified <code>alternateBases</code> </li> <li>typical use are queries for SNV and small InDels  </li> <li>the use of <code>start</code> without an <code>end</code> parameter requires the use of <code>alternateBases</code> </li> <li>1 value in both <code>start</code> and <code>end</code>:  </li> <li>for searching any variant falling fully or partially within the range     between <code>start</code> and <code>end</code> (a.k.a. \"range query\")  </li> <li>additional use of <code>variantType</code> OR <code>alternateBases</code> can limit the     scope of the query  </li> <li>by convention, partial overlaps of variants with the indicated genomic     range are accepted; for specific overlap requirements the 4-parameter     \"Bracket Queries\" should be employed  </li> <li>2 values in both <code>start</code> and <code>end</code> for constructing a \"Bracket Query\":  </li> <li>can be used to match any contiguous genomic interval, e.g. for querying     imprecise positions  </li> <li>identifies all structural variants starting between <code>start[0]</code> and <code>start[1]</code>,     and ending between <code>end[0]</code> &lt;-&gt; <code>end[1]</code> </li> <li>single or double sided precise matches can be achieved by setting <code>start[1]=start[0]+1</code> and <code>end[1]=end[0]+1</code> </li> </ul>"},{"location":"generated/requestParameterComponents/#definitions_24","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>array</code> </p> </li> <li> <p><code>items</code>:    </p> <ul> <li><code>type</code>: <code>integer</code> </li> <li><code>format</code>: <code>int64</code> </li> <li><code>minimum</code>: <code>0</code> </li> </ul> </li> <li> <p><code>minItems</code>: <code>1</code> </p> </li> <li> <p><code>maxItems</code>: <code>2</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#end","title":"<code>End</code>","text":""},{"location":"generated/requestParameterComponents/#description_25","title":"Description","text":""},{"location":"generated/requestParameterComponents/#notes","title":"Notes","text":"<p>See the <code>start</code> parameter for information on the potential replacement of this parameter with the VRS based definition.  </p> <p>Precise or bracketing the end of the variants of interest:  </p> <ul> <li>(0-based, exclusive) - see <code>start</code> </li> <li>for bracket queries, provide 2 values (e.g. [111,222]).    </li> </ul>"},{"location":"generated/requestParameterComponents/#definitions_25","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>array</code> </p> </li> <li> <p><code>items</code>:    </p> <ul> <li><code>type</code>: <code>integer</code> </li> <li><code>format</code>: <code>int64</code> </li> <li><code>minimum</code>: <code>1</code> </li> </ul> </li> <li> <p><code>minItems</code>: <code>1</code> </p> </li> <li> <p><code>maxItems</code>: <code>2</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#matename","title":"<code>MateName</code>","text":""},{"location":"generated/requestParameterComponents/#description_26","title":"Description","text":""},{"location":"generated/requestParameterComponents/#notes_1","title":"Notes","text":"<ul> <li>while the <code>mateName</code> parameter was originally defined for Beacon v1.1   it was never properly documented and is not considered a part of the   supported Beacon v2.n specification. It is now fully implemented in the   VRS v2 based <code>adjacencyAccession</code> parameter.  </li> </ul> <p>Status: DEPRECATED in v2.n    </p>"},{"location":"generated/requestParameterComponents/#definitions_26","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1.1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>$ref</code>: <code>#/$defs/RefSeqId</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#matestart","title":"<code>MateStart</code>","text":""},{"location":"generated/requestParameterComponents/#description_27","title":"Description","text":"<p>genomic start position of fusion partner breakpoint region Status: DEPRECATED in v2.n (see <code>mateName</code>)    </p>"},{"location":"generated/requestParameterComponents/#definitions_27","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1.1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>integer</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#mateend","title":"<code>MateEnd</code>","text":""},{"location":"generated/requestParameterComponents/#description_28","title":"Description","text":"<p>genomic end position of fusion partner breakpoint region Status: DEPRECATED in v2.n (see <code>mateName</code>)    </p>"},{"location":"generated/requestParameterComponents/#definitions_28","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v1.1</code> </li> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>integer</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#variantminlength","title":"<code>VariantMinLength</code>","text":""},{"location":"generated/requestParameterComponents/#description_29","title":"Description","text":"<ul> <li>Minimum length in bases of a genomic variant  </li> <li>This is an optional parameter without prescribed use. While a length is   commonly available for structural variants such as copy number variations,   it is recommended that length based queries should also be supported for   variants with indicated referenceBases and alternateBases, to enable   length-specific wildcard queries.  </li> </ul> <p>Origin: Beacon v2.0  </p> <p>Status: DEPRECATED in v2.n (see <code>sequenceLength</code>)    </p>"},{"location":"generated/requestParameterComponents/#definitions_29","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>integer</code> </p> </li> <li> <p><code>format</code>: <code>int64</code> </p> </li> <li> <p><code>minimum</code>: <code>0</code> </p> </li> </ul>"},{"location":"generated/requestParameterComponents/#variantmaxlength","title":"<code>VariantMaxLength</code>","text":""},{"location":"generated/requestParameterComponents/#description_30","title":"Description","text":"<ul> <li>Maximum length in bases of a genomic variant.  </li> <li>This is an optional parameter without prescribed use. While a length is   commonly available for structural variants such as copy number variations,   it is recommended that length based queries should also be supported for   variants with indicated referenceBases and alternateBases, to enable   length-specific wildcard queries.  </li> </ul> <p>Status: DEPRECATED in v2.n (see <code>sequenceLength</code>)  </p> <p>Origin: Beacon v2.0    </p>"},{"location":"generated/requestParameterComponents/#definitions_30","title":"Definitions","text":"<ul> <li> <p><code>versions</code>:     </p> <ul> <li><code>v2.0</code> </li> <li><code>v2.1</code> </li> </ul> </li> <li> <p><code>type</code>: <code>integer</code> </p> </li> <li> <p><code>format</code>: <code>int64</code> </p> </li> <li> <p><code>minimum</code>: <code>1</code> </p> </li> </ul>"},{"location":"generated/requestProfiles/","title":"Request Profile Definitions","text":""},{"location":"generated/requestProfiles/#g_variant","title":"<code>g_variant</code>","text":""},{"location":"generated/requestProfiles/#description","title":"Description","text":"<p>This represents the generic collection of variant parameters allowed in Beacon v2 requests.    </p>"},{"location":"generated/requestProfiles/#definitions","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li><code>properties</code>:    <ul> <li><code>assemblyId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Assembly'</code> </li> <li><code>referenceName</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefSeqId'</code> </li> <li><code>referenceBases</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/ReferenceBases'</code> </li> <li><code>alternateBases</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/AlternateBases'</code> </li> <li><code>variantType</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantType'</code> </li> <li><code>start</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Start'</code> </li> <li><code>end</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/End'</code> </li> <li><code>geneId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GeneId'</code> </li> <li><code>aminoacidChange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/AminoacidChange'</code> </li> <li><code>genomicAlleleShortForm</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GenomicAlleleShortForm'</code> </li> <li><code>variantMinLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMinLength'</code> </li> <li><code>variantMaxLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMaxLength'</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#examples-examplesg_variantyamlexamples","title":"<code>examples</code>: ../examples/g_variant.yaml#/examples","text":""},{"location":"generated/requestProfiles/#vqsrequest","title":"<code>VQSrequest</code>","text":""},{"location":"generated/requestProfiles/#description_1","title":"Description","text":"<p>The <code>VQSrequest</code> type represents the generic collection of variant parameters supported in Beacon v2+ requests. These include parameters with close alignment to VRS v2 concepts and replacing some Beacon v1/v2 generics with tighter definitions (e.g. <code>referenceAccession</code> instead of <code>referenceName</code> and <code>accession</code> or <code>copyChange</code> for a specific subset of former <code>variantType</code> values) but also keep some conceptsm beyond VRS scope or specifically geared towards query applications (<code>geneId</code>, <code>sequenceLength</code>)    </p>"},{"location":"generated/requestProfiles/#definitions_1","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li><code>properties</code>:    <ul> <li><code>requestProfile</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RequestProfileId'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefgetAccession'</code> </li> <li><code>startPos</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceStart'</code> </li> <li><code>endPos</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceEnd'</code> </li> <li><code>startRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>endRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>sequence</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Sequence'</code> </li> <li><code>copyChange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/CopyChange'</code> </li> <li><code>adjacencyAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/AdjacencyAccession'</code> </li> <li><code>adjacencyRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>repeatSubunitCount</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RepeatSubunitCount'</code> </li> <li><code>repeatSubunitLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RepeatSubunitLength'</code> </li> <li><code>geneId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GeneId'</code> </li> <li><code>aminoacidChange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/AminoacidChange'</code> </li> <li><code>genomicAlleleShortForm</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GenomicAlleleShortForm'</code> </li> <li><code>sequenceLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceLength'</code> </li> <li><code>vrsType</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VRStype'</code> </li> <li><code>genomicFeature</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GenomicFeature'</code> </li> <li><code>molecularEffect</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/MolecularEffect'</code> </li> <li><code>phenoClinicEffect</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/PhenoClinicEffect'</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#variantidrequest","title":"<code>variantIdRequest</code>","text":""},{"location":"generated/requestProfiles/#description_2","title":"Description","text":"<p>A typical Beacon v2 request for matching variations by their <code>variantId</code>. This request is used to retrieve a specific variant by its identifier.    </p>"},{"location":"generated/requestProfiles/#definitions_2","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li><code>properties</code>:    <ul> <li><code>requestProfile</code>: <code>'const': 'BV2variantIdRequest'</code> </li> <li><code>variantId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantId'</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#aminoacidchangerequest","title":"<code>aminoacidChangeRequest</code>","text":""},{"location":"generated/requestProfiles/#description_3","title":"Description","text":"<p>A Beacon v2 request for amino acid change queries, e.g. for the retrieval of all variants leading to specific amino acid change. The request may be restricted by additionally providing the gene ID.    </p>"},{"location":"generated/requestProfiles/#definitions_3","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'BV2aminoacidChangeRequest'</code> </li> <li><code>aminoacidChange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/AminoacidChange'</code> </li> <li><code>geneId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GeneId'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>aminoacidChange</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#genomicalleleshortformrequest","title":"<code>genomicAlleleShortFormRequest</code>","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li><code>properties</code>:    <ul> <li><code>genomicAlleleShortForm</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GenomicAlleleShortForm'</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#geneidrequest","title":"<code>geneIdRequest</code>","text":""},{"location":"generated/requestProfiles/#description_4","title":"Description","text":"<p>A typical Beacon v2.n request for gene queries, e.g. for the retrieval of all variants in a gene or variants restricted by additional parameters such <code>variantType</code> or length of the affected sequence. TODO: Evaluate to split into more basic <code>GeneIdRequest</code> and specialized       requests requiring an effect component. There is already a type for       a <code>molecularEffectRequest</code> - see also notes there.    </p>"},{"location":"generated/requestProfiles/#definitions_4","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'geneIdRequest'</code> </li> <li><code>geneId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GeneId'</code> </li> <li><code>variantMinLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMinLength'</code> </li> <li><code>variantMaxLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMaxLength'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>geneId</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#bv2allelerequest","title":"<code>BV2alleleRequest</code>","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'description': 'Note: The</code>requestProfile<code>parameter had not been defined for Beacon v2.0\\nand therefore in _senso stricto_ is not part of requests only relying\\non v2 parameters.', 'const': 'BV2alleleRequest'</code> </li> <li><code>assemblyId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Assembly'</code> </li> <li><code>referenceName</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefSeqId'</code> </li> <li><code>start</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Start'</code> </li> <li><code>referenceBases</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/ReferenceBases'</code> </li> <li><code>alternateBases</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/AlternateBases'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>referenceName</code> </li> <li><code>start</code> </li> <li><code>alternateBases</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#bv2bracketrequest","title":"<code>BV2bracketRequest</code>","text":""},{"location":"generated/requestProfiles/#description_5","title":"Description","text":"<p>A typical Beacon v2 request for matching variations where start and end fall in a genomic range. Here, the approximate or varying positions for variation start and end are queried through brackets, i.e. by using 2 values for <code>start</code> and <code>end</code> each. This is a typical scenario in querying for CNVs where the <code>variantType</code> parameter indicates the relative change in genomic copy number through either VCF derived string parameters or, preferably, EFO terms (pls. refer to the class definition.) Since a bracket request is a positional query for varying sequence extend no <code>sequence</code> parameter should be used.    </p>"},{"location":"generated/requestProfiles/#definitions_5","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'BV2bracketRequest'</code> </li> <li><code>assemblyId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Assembly'</code> </li> <li><code>referenceName</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefSeqId'</code> </li> <li><code>start</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Start'</code> </li> <li><code>end</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/End'</code> </li> <li><code>variantType</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantType'</code> </li> <li><code>variantMinLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMinLength'</code> </li> <li><code>variantMaxLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMaxLength'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>referenceName</code> </li> <li><code>start</code> </li> <li><code>end</code> </li> <li><code>variantType</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#bv2rangerequest","title":"<code>BV2rangeRequest</code>","text":""},{"location":"generated/requestProfiles/#description_6","title":"Description","text":"<p>Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by <code>referenceName</code>, <code>start</code> and end <code>parameters</code>. Additional qualifiers such as <code>variantType</code> or length of the affected sequence can be used to further restrict the returned results. For this request type <code>start</code> and <code>end</code> with a single position are used, i.e. a subset of the <code>start</code> and <code>end</code> specifications.    </p>"},{"location":"generated/requestProfiles/#definitions_6","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'BV2rangeRequest'</code> </li> <li><code>assemblyId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Assembly'</code> </li> <li><code>referenceName</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefSeqId'</code> </li> <li><code>start</code>: <code>'type': 'array', 'items': 'type': 'integer', 'minItems': 1, 'maxItems': 1</code> </li> <li><code>end</code>: <code>'type': 'array', 'items': 'type': 'integer', 'minItems': 1, 'maxItems': 1</code> </li> <li><code>variantType</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantType'</code> </li> <li><code>variantMinLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMinLength'</code> </li> <li><code>variantMaxLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VariantMaxLength'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>referenceName</code> </li> <li><code>start</code> </li> <li><code>end</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqsallelerequest","title":"<code>VQSalleleRequest</code>","text":""},{"location":"generated/requestProfiles/#description_7","title":"Description","text":"<p>A Beacon v2+ sequence query. It is in its scope similar to the Beacon v1/v2 allele requests but replaces the original parameters with VRS v2 concepts.    </p>"},{"location":"generated/requestProfiles/#definitions_7","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSalleleRequest'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefgetAccession'</code> </li> <li><code>start</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceStart'</code> </li> <li><code>end</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceEnd'</code> </li> <li><code>sequence</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Sequence'</code> </li> <li><code>vrsType</code>: <code>'const': 'Allele'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>referenceAccession</code> </li> <li><code>start</code> </li> <li><code>sequence</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqscopychangerequest","title":"<code>VQScopyChangeRequest</code>","text":""},{"location":"generated/requestProfiles/#description_8","title":"Description","text":"<p>A typical Beacon v2.n request for copy number variations (CNVs) queries approximate positions for CNV start and end regions through use of the <code>Range</code> type. The <code>copyChange</code> parameter indicates the relative change in genomic copy number (pls. refer to the class definition.)    </p>"},{"location":"generated/requestProfiles/#definitions_8","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQScopyChangeRequest'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefgetAccession'</code> </li> <li><code>startRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>endRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>copyChange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/CopyChange'</code> </li> <li><code>sequenceLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceLength'</code> </li> <li><code>vrsType</code>: <code>'const': 'CopyNumberChange'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>requestProfile</code> </li> <li><code>referenceAccession</code> </li> <li><code>startRange</code> </li> <li><code>endRange</code> </li> <li><code>copyChange</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqsgenemoleculareffectrequest","title":"<code>VQSgeneMolecularEffectRequest</code>","text":""},{"location":"generated/requestProfiles/#description_9","title":"Description","text":"<p>A request for the variation consequence, e.g. for the molecular changes caused by the variant.  </p>"},{"location":"generated/requestProfiles/#todo","title":"TODO","text":"<ul> <li>Define a clear structure for how request types are constructed with a   primacy of where the variant is located or what happens.     </li> </ul>"},{"location":"generated/requestProfiles/#definitions_9","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSgeneMolecularEffectRequest'</code> </li> <li><code>molecularEffect</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/MolecularEffect'</code> </li> <li><code>geneId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GeneId'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>requestProfile</code> </li> <li><code>molecularEffect</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqslocationmoleculareffectrequest","title":"<code>VQSlocationMolecularEffectRequest</code>","text":""},{"location":"generated/requestProfiles/#description_10","title":"Description","text":"<p>A request for the variation consequence, e.g. for the molecular changes caused by the variant, at a genomic location defined through coordinates.    </p>"},{"location":"generated/requestProfiles/#definitions_10","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSlocationMolecularEffectRequest'</code> </li> <li><code>molecularEffect</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/MolecularEffect'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefSeqId'</code> </li> <li><code>sequenceRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>requestProfile</code> </li> <li><code>referenceAccession</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqsrangerequest","title":"<code>VQSrangeRequest</code>","text":""},{"location":"generated/requestProfiles/#description_11","title":"Description","text":"<p>Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by <code>referenceAccession</code>, <code>start</code> and <code>end</code> parameters. Additional qualifiers such as <code>copyChange</code> or length of the affected sequence can be used to further restrict the returned results. For this request type usually <code>start</code> and <code>end</code> with a single position are used, i.e. a subset of the <code>start</code> and <code>end</code> specifications. However,   </p>"},{"location":"generated/requestProfiles/#todo_1","title":"TODO","text":"<ul> <li>Evaluate to split into more basic <code>RangeRequest</code> and specialized   requests requiring an effect component  </li> <li>Review current VRS v2 and upcoming versions for optoions to express   types of variants beyond the <code>copyChange</code> parameter    </li> </ul>"},{"location":"generated/requestProfiles/#definitions_11","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSrangeRequest'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefSeqId'</code> </li> <li><code>sequenceRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>sequenceLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceLength'</code> </li> <li><code>vrsType</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VRStype'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>requestProfile</code> </li> <li><code>referenceAccession</code> </li> <li><code>sequenceRange</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqsadjacencyrequest","title":"<code>VQSadjacencyRequest</code>","text":""},{"location":"generated/requestProfiles/#description_12","title":"Description","text":"<p>A typical Beacon v2.n request for sequence adjacency queries, e.g. for the retrieval of chromosomal translocation events or sequence fusions.  </p> <p>TODO: In VRS v2 there is an implicit sequence directionality from the use of either start or end parameters for either side of the adjacency. This might be problematic on the query side where in many instances just the approximate position of the (fused) breakpoints maight be of interest.  </p> <p>This might need additional clarification (e.g. use of <code>startRange</code> or <code>endRange</code>, <code>adjacencyStartRange</code> and <code>adjecencyEndRange</code> parameters to indicate direction dependent matching).    </p>"},{"location":"generated/requestProfiles/#definitions_12","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSadjacencyRequest'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefgetAccession'</code> </li> <li><code>sequenceRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>adjacencyAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/AdjacencyAccession'</code> </li> <li><code>adjacencyRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>vrsType</code>: <code>'const': 'Adjacency'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>requestProfile</code> </li> <li><code>referenceAccession</code> </li> <li><code>sequenceRange</code> </li> <li><code>adjacencyAccession</code> </li> <li><code>adjacencyRange</code> </li> <li><code>vrsType</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqsterminusrequest","title":"<code>VQSterminusRequest</code>","text":""},{"location":"generated/requestProfiles/#description_13","title":"Description","text":"<p>A Beacon v2.n request for a sequence terminus, i.e. the end of a sequence. An example would be the match of chromosomal breakpoints terminating the derived chromosome w/o resulting sequence fusion.  </p> <p>TODO: As in adjacency requests one could use <code>startRange</code> or <code>endRange</code> to limit the side of the breakpoint.    </p>"},{"location":"generated/requestProfiles/#definitions_13","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSterminusRequest'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefgetAccession'</code> </li> <li><code>sequenceRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>vrsType</code>: <code>'const': 'Terminus'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>requestProfile</code> </li> <li><code>referenceAccession</code> </li> <li><code>sequenceRange</code> </li> <li><code>vrsType</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqssequencerepeatrequest","title":"<code>VQSsequenceRepeatRequest</code>","text":""},{"location":"generated/requestProfiles/#description_14","title":"Description","text":"<p>A Beacon v2.n request for sequence repeat queries, e.g. for the retrieval of tandem repeat expansions or other sequence repeat events.    </p>"},{"location":"generated/requestProfiles/#definitions_14","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSsequenceRepeatRequest'</code> </li> <li><code>referenceAccession</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RefgetAccession'</code> </li> <li><code>sequenceRange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/Range'</code> </li> <li><code>repeatSubunitLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RepeatSubunitLength'</code> </li> <li><code>repeatSubunitCount</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/RepeatSubunitCount'</code> </li> <li><code>vrsType</code>: <code>'const': 'SequenceRepeat'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>requestProfile</code> </li> <li><code>referenceAccession</code> </li> <li><code>sequenceRange</code> </li> <li><code>vrsType</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqsgeneidrequest","title":"<code>VQSgeneIdRequest</code>","text":""},{"location":"generated/requestProfiles/#description_15","title":"Description","text":"<p>A typical Beacon v2.n request for gene queries, e.g. for the retrieval of all variants in a gene or variants restricted by additional parameters such as CNV type (<code>copyChange</code>) or length of the affected sequence. TODO: Evaluate to split into more basic <code>GeneIdRequest</code> and specialized       requests requiring an effect component.    </p>"},{"location":"generated/requestProfiles/#definitions_15","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li> <p><code>properties</code>:    </p> <ul> <li><code>requestProfile</code>: <code>'const': 'VQSgeneIdRequest'</code> </li> <li><code>geneId</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/GeneId'</code> </li> <li><code>copyChange</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/CopyChange'</code> </li> <li><code>sequenceLength</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/SequenceLength'</code> </li> <li><code>molecularEffect</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/molecularEffect'</code> </li> <li><code>clinicalRelevance</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/clinicalRelevance'</code> </li> <li><code>vrsType</code>: <code>'$ref': './requestParameterComponents.yaml#/$defs/VRStype'</code> </li> </ul> </li> <li> <p><code>required</code>:     </p> <ul> <li><code>geneId</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#bv2multivarsrequest","title":"<code>BV2multivarsRequest</code>","text":""},{"location":"generated/requestProfiles/#description_16","title":"Description","text":"<p>This multi variant query is a collection of individual variant queries based on the Beacon v2 parameters (<code>g_variant</code>). Status: Proposed for evaluation for Beacon v2.n or v3.0 (but potentially         skipped in favor of the <code>VQSmultivarRequest</code> queries).    </p>"},{"location":"generated/requestProfiles/#definitions_16","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li><code>properties</code>:    <ul> <li><code>requestProfile</code>: <code>'const': 'BV2multivarsRequest'</code> </li> <li><code>variantLogic</code>: <code>'description': 'The logic to apply to the set of variants in the query. The default is\\nto apply the AND logic, meaning that all **samples** (i.e. biosamples,\\nindividuals or analyses) must fulfil the query criteria:\\n* with a (default) AND logic and \"biosamples\" as requested entity \\n</code>biosample_id<code>values from the individual variant query responses\\n  will be intersected\\n* with an OR logic and \"analyses\" as requested entity</code>analysis_id<code>\\n  values from the individual variant query responses will be concatenated\\nNote: The</code>variantLogic<code>parameter is not defined in the current\\n</code>requestParameterComponents.yaml<code>file yet due to the very experimental\\n      and tentative nature of this proposal.', 'type': 'string', 'enum': ['AND', 'OR'], 'default': 'AND'</code> </li> <li><code>queries</code>: <code>'type': 'array', 'items': '$ref': '#/$defs/g_variant'</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles/#vqsmultivarrequest","title":"<code>VQSmultivarRequest</code>","text":""},{"location":"generated/requestProfiles/#description_17","title":"Description","text":"<p>This multi variant query is a collection of individual variant queries based on the Beacon v2+ \"VQS\" query patterns. Status: Proposed for evaluation for Beacon v2.n or v3.0    </p>"},{"location":"generated/requestProfiles/#definitions_17","title":"Definitions","text":"<ul> <li><code>type</code>: <code>object</code> </li> <li><code>properties</code>:    <ul> <li><code>requestProfile</code>: <code>'const': 'VQSmultivarRequest'</code> </li> <li><code>variantLogic</code>: <code>'type': 'string', 'enum': ['AND', 'OR'], 'default': 'AND'</code> </li> <li><code>queries</code>: <code>'type': 'array', 'items': 'anyOf': ['$ref': '#/$defs/VQSalleleRequest', '$ref': '#/$defs/VQScopyChangeRequest', '$ref': '#/$defs/VQSadjacencyRequest', '$ref': '#/$defs/VQSgeneIdRequest', '$ref': '#/$defs/BV2variantIdRequest', '$ref': '#/$defs/BV2aminoacidChangeRequest', '$ref': '#/$defs/BV2genomicAlleleShortFormRequest']</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles_BV2alleleRequest/","title":"Request Profile: <code>BV2alleleRequest</code>","text":""},{"location":"generated/requestProfiles_BV2aminoacidChangeRequest/","title":"Request Profile: <code>BV2aminoacidChangeRequest</code>","text":"<p>A Beacon v2 request for amino acid change queries, e.g. for the retrieval of all variants leading to specific amino acid change. The request may be restricted by additionally providing the gene ID.</p>"},{"location":"generated/requestProfiles_BV2bracketRequest/","title":"Request Profile: <code>BV2bracketRequest</code>","text":"<p>A typical Beacon v2 request for matching variations where start and end fall in a genomic range. Here, the approximate or varying positions for variation start and end are queried through brackets, i.e. by using 2 values for <code>start</code> and <code>end</code> each. This is a typical scenario in querying for CNVs where the <code>variantType</code> parameter indicates the relative change in genomic copy number through either VCF derived string parameters or, preferably, EFO terms (pls. refer to the class definition.) Since a bracket request is a positional query for varying sequence extend no <code>sequence</code> parameter should be used.</p>"},{"location":"generated/requestProfiles_BV2bracketRequest/#find-small-variable-sequence-insertionsdeletions-at-an-approximate-position","title":"Find small, variable sequence insertions/deletions at an approximate position","text":""},{"location":"generated/requestProfiles_BV2bracketRequest/#solution-g_variant-with-start-and-end-ranges-bv2bracketrequest","title":"Solution <code>g_variant</code> with <code>start</code> and <code>end</code> ranges (<code>BV2bracketRequest</code>)","text":"<p>and <code>variantType</code></p> <p>Here sequence variants (insertions or deletions) involving a specific region on chromosome 17 but of varying length are matched by using \"fuzzy\" start  and end ranges (\"brackets\"). The variant type is identified as an INDEL although the interpretation is left to the implementation; e.g. an insertion which is stored as sequence change <code>17:43045708:A&gt;AAACAAAC</code> would fulfill the request but might not be indicated as <code>INDEL</code> type.</p>"},{"location":"generated/requestProfiles_BV2bracketRequest/#request","title":"Request","text":"<ul> <li> <p><code>assemblyId</code>: <code>GRCh38</code> </p> </li> <li> <p><code>referenceName</code>: <code>17</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>43045703</code> </li> <li><code>43045709</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>43045715</code> </li> <li><code>43045720</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>INDEL</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_BV2bracketRequest/#get-query-string","title":"GET query string","text":"<pre><code>?assemblyId=GRCh38&amp;referenceName=17&amp;start=43045703,43045709&amp;end=43045715,43045720&amp;variantType=INDEL\n</code></pre>"},{"location":"generated/requestProfiles_BV2bracketRequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"assemblyId\": \"GRCh38\",\n    \"end\": [\n        43045715,\n        43045720\n    ],\n    \"referenceName\": 17,\n    \"start\": [\n        43045703,\n        43045709\n    ],\n    \"variantType\": \"INDEL\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_BV2bracketRequest/#copy-number-gains-involving-the-whole-locus-chr254700000-63900000","title":"Copy number gains involving the whole locus chr2:54,700,000-63,900,000","text":""},{"location":"generated/requestProfiles_BV2bracketRequest/#solution-for-g_variant-using-start-and-end-ranges-bv2bracketrequest","title":"Solution for <code>g_variant</code> using <code>start</code> and <code>end</code> ranges (<code>BV2bracketRequest</code>)","text":"<p>The query has to indicate the involved genomic region by positions as well as the type of change. Here, matched duplication events start 5` of the region and end 3` of it. For capturing any event upt to the complete chromosome duplication this requires knowledge about the maximum value (i.e. chromosome base length; using a random very large number might fail depending on the implementation).</p> <p>The example uses <code>EFO:0030070</code> for <code>copy number gain</code> instead of the alternative <code>SO:0001742</code> <code>copy_number_gain</code> or the VCF <code>DUP</code> as the preferred since the EFO terms provide a more granular expressivity and are referenced in the VRS definitions.</p>"},{"location":"generated/requestProfiles_BV2bracketRequest/#request_1","title":"Request","text":"<ul> <li> <p><code>assemblyId</code>: <code>GRCh38</code> </p> </li> <li> <p><code>referenceName</code>: <code>refseq:NC_000002.12</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>0</code> </li> <li><code>54700000</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>63900000</code> </li> <li><code>242193529</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>EFO:0030070</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_BV2bracketRequest/#get-query-string_1","title":"GET query string","text":"<pre><code>?assemblyId=GRCh38&amp;referenceName=refseq:NC_000002.12&amp;start=0,54700000&amp;end=63900000,242193529&amp;variantType=EFO:0030070\n</code></pre>"},{"location":"generated/requestProfiles_BV2bracketRequest/#post-query-component_1","title":"POST query component","text":"<pre><code>{\n    \"assemblyId\": \"GRCh38\",\n    \"end\": [\n        63900000,\n        242193529\n    ],\n    \"referenceName\": \"refseq:NC_000002.12\",\n    \"start\": [\n        0,\n        54700000\n    ],\n    \"variantType\": \"EFO:0030070\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_BV2geneIdRequest/","title":"Request Profile: <code>BV2geneIdRequest</code>","text":"<p>A typical Beacon v2.n request for gene queries, e.g. for the retrieval of all variants in a gene or variants restricted by additional parameters such <code>variantType</code> or length of the affected sequence. TODO: Evaluate to split into more basic <code>GeneIdRequest</code> and specialized       requests requiring an effect component.</p>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#query-for-a-deletion-involving-tp53","title":"Query for a deletion involving TP53","text":""},{"location":"generated/requestProfiles_BV2geneIdRequest/#solution-g_variant-with-geneid-bv2geneidrequest","title":"Solution <code>g_variant</code> with <code>geneId</code> (<code>BV2geneIdRequest</code>)","text":"<p>Query for a deletion involving TP53 by using the HUGO name to specify the gene. This request does not provide coordinates so on the server side matching has to be performed from annotated variants or by retrieving the gene's coordinates and creating internally a type of range request.</p>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#request","title":"Request","text":"<ul> <li> <p><code>geneId</code>: <code>TP53</code> </p> </li> <li> <p><code>variantType</code>: <code>DEL</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#get-query-string","title":"GET query string","text":"<p><code>geneId=TP53&amp;variantType=DEL</code></p>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#post-query-component","title":"POST query component","text":"<p><code>{     \"geneId\": \"TP53\",     \"variantType\": \"DEL\" }</code></p>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#find-insertion-events-in-tp53","title":"Find insertion events in TP53","text":""},{"location":"generated/requestProfiles_BV2geneIdRequest/#solution-using-g_variant-with-geneid-bv2geneidrequest","title":"Solution using <code>g_variant</code> with <code>geneId</code> (<code>BV2geneIdRequest</code>)","text":"<p>Query for a deletion involving TP53 by using the HUGO name to specify the gene. This request does not provide coordinates so on the server side matching has to be performed from annotated variants or by retrieving the gene's coordinates and creating internally a type of range request. The \"insertion\" type is here provided through the Sequence Ontology term <code>SO:0000667</code> (which has to be supported by the beacon server, either in the annotation or through mapping to the internal vocabulary).</p>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#request_1","title":"Request","text":"<ul> <li> <p><code>geneId</code>: <code>TP53</code> </p> </li> <li> <p><code>variantType</code>: <code>SO:0000667</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#get-query-string_1","title":"GET query string","text":"<p><code>geneId=TP53&amp;variantType=SO:0000667</code></p>"},{"location":"generated/requestProfiles_BV2geneIdRequest/#post-query-component_1","title":"POST query component","text":"<p><code>{     \"geneId\": \"TP53\",     \"variantType\": \"SO:0000667\" }</code></p>"},{"location":"generated/requestProfiles_BV2genomicAlleleShortFormRequest/","title":"Request Profile: <code>BV2genomicAlleleShortFormRequest</code>","text":""},{"location":"generated/requestProfiles_BV2multivarsRequest/","title":"Request Profile: <code>BV2multivarsRequest</code>","text":"<p>This multi variant query is a collection of individual variant queries based on the Beacon v2 parameters (<code>g_variant</code>). Status: Proposed for evaluation for Beacon v2.n or v3.0 (but potentially         skipped in favor of the <code>VQSmultivarRequest</code> queries).</p>"},{"location":"generated/requestProfiles_BV2rangeRequest/","title":"Request Profile: <code>BV2rangeRequest</code>","text":"<p>Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by <code>referenceName</code>, <code>start</code> and end <code>parameters</code>. Additional qualifiers such as <code>variantType</code> or length of the affected sequence can be used to further restrict the returned results. For this request type <code>start</code> and <code>end</code> with a single position are used, i.e. a subset of the <code>start</code> and <code>end</code> specifications.</p>"},{"location":"generated/requestProfiles_BV2rangeRequest/#find-variants-overlapping-an-approximate-sequence-location","title":"Find variants overlapping an approximate sequence location","text":""},{"location":"generated/requestProfiles_BV2rangeRequest/#solution-g_variant-with-range-indicated-by-single-start-and-end-positions-bv2rangerequest","title":"Solution <code>g_variant</code> with range indicated by single <code>start</code> and <code>end</code> positions (<code>BV2rangeRequest</code>)","text":"<p>and <code>variantType</code></p> <p>Here sequence variants at a specifiied region on chromosome 2 are matched by using single start and end positions to indicate the genomic range.</p> <p>CAVE: Since no variant type is indicated such a query can potentially match a large number of variants, depending on the beacon's content and query interpretation (e.g. \"any\" overlap of a CNV could be matched unless the variant type is required for CNV queries).</p>"},{"location":"generated/requestProfiles_BV2rangeRequest/#request","title":"Request","text":"<ul> <li> <p><code>assemblyId</code>: <code>GRCh38</code> </p> </li> <li> <p><code>referenceName</code>: <code>17</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>345675</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>345681</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles_BV2rangeRequest/#get-query-string","title":"GET query string","text":"<pre><code>?assemblyId=GRCh38&amp;referenceName=17&amp;start=345675&amp;end=345681\n</code></pre>"},{"location":"generated/requestProfiles_BV2rangeRequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"assemblyId\": \"GRCh38\",\n    \"end\": [\n        345681\n    ],\n    \"referenceName\": \"17\",\n    \"start\": [\n        345675\n    ]\n}\n</code></pre>"},{"location":"generated/requestProfiles_BV2rangeRequest/#query-for-a-deletion-involving-tp53","title":"Query for a deletion involving TP53","text":""},{"location":"generated/requestProfiles_BV2rangeRequest/#solution-using-g_variant-with-position-range","title":"Solution using <code>g_variant</code> with position range","text":"<p>Query for a deletion involving TP53 using the maximum extent of the gene's coding region (known from somewhere...). The deletion to be found are expected to have an overlap with the queried range; however, the extent of the overlap is not pre-defined (most endpoints woul respond to a recommended \"any\" overlap but this is not a strict requirement imposed by the schema). Here positions refer to chromosome 17 on GRCh38 as indicated by the referenceName RefSeq ID.</p> <p>Recommendation Implementers should provide a mechanism to match any \"deletion\" <code>variantType</code> (<code>EFO:0030067</code>, <code>DEL</code>, <code>SO:0001743</code>) independent of size since operational definitions of <code>CNV</code> vs. <code>INDEL</code> vary, and use explicit <code>variantMinLength</code>, <code>variantMaxLength</code> parameters if needed.</p>"},{"location":"generated/requestProfiles_BV2rangeRequest/#request_1","title":"Request","text":"<ul> <li> <p><code>referenceName</code>: <code>refseq:NC_0000017.11</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>7669608</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>7676593</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>DEL</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_BV2rangeRequest/#get-query-string_1","title":"GET query string","text":"<pre><code>?referenceName=refseq:NC_0000017.11&amp;start=7669608&amp;end=7676593&amp;variantType=DEL\n</code></pre>"},{"location":"generated/requestProfiles_BV2rangeRequest/#post-query-component_1","title":"POST query component","text":"<pre><code>{\n    \"end\": [\n        7676593\n    ],\n    \"referenceName\": \"refseq:NC_0000017.11\",\n    \"start\": [\n        7669608\n    ],\n    \"variantType\": \"DEL\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_BV2rangeRequest/#find-insertion-events-in-tp53-or-in-close-proximity-5000bp","title":"Find insertion events in TP53 or in close proximity (\u00b1~5000bp)","text":""},{"location":"generated/requestProfiles_BV2rangeRequest/#solution-using-g_variant-with-position-range-bv2rangerequest","title":"Solution using <code>g_variant</code> with position range (<code>BV2rangeRequest</code>)","text":"<p>For this query the mapping position of TP53 (17:7669607-7676593) has to be known. Usually this knowledge would be provided by a front end helper and the aditional padding added manually or w/ a helper field (if frequent scenario) and the beacon itself would just receive the positional range request.</p> <p>The \"insertion\" type is here provided through the Sequence Ontology term <code>SO:0000667</code> and for the chromosome the full, prefixed RefSeq term is being used.</p>"},{"location":"generated/requestProfiles_BV2rangeRequest/#request_2","title":"Request","text":"<ul> <li> <p><code>referenceName</code>: <code>refseq:NC_0000017.11</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>7664000</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>7682000</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>SO:0000667</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_BV2rangeRequest/#get-query-string_2","title":"GET query string","text":"<pre><code>?referenceName=refseq:NC_0000017.11&amp;start=7664000&amp;end=7682000&amp;variantType=SO:0000667\n</code></pre>"},{"location":"generated/requestProfiles_BV2rangeRequest/#post-query-component_2","title":"POST query component","text":"<pre><code>{\n    \"end\": [\n        7682000\n    ],\n    \"referenceName\": \"refseq:NC_0000017.11\",\n    \"start\": [\n        7664000\n    ],\n    \"variantType\": \"SO:0000667\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_BV2variantIdRequest/","title":"Request Profile: <code>BV2variantIdRequest</code>","text":"<p>A typical Beacon v2 request for matching variations by their <code>variantId</code>. This request is used to retrieve a specific variant by its identifier.</p>"},{"location":"generated/requestProfiles_VQSadjacencyRequest/","title":"Request Profile: <code>VQSadjacencyRequest</code>","text":"<p>A typical Beacon v2.n request for sequence adjacency queries, e.g. for the retrieval of chromosomal translocation events or sequence fusions.</p> <p>TODO: In VRS v2 there is an implicit sequence directionality from the use of either start or end parameters for either side of the adjacency. This might be problematic on the query side where in many instances just the approximate position of the (fused) breakpoints maight be of interest.</p> <p>This might need additional clarification (e.g. use of <code>startRange</code> or <code>endRange</code>, <code>adjacencyStartRange</code> and <code>adjecencyEndRange</code> parameters to indicate direction dependent matching).</p>"},{"location":"generated/requestProfiles_VQSadjacencyRequest/#find-t814q24q32-translocations","title":"Find  t(8;14)(q24;q32) translocations","text":""},{"location":"generated/requestProfiles_VQSadjacencyRequest/#solution-for-vqsrequest-using-genomic-ranges-vqsadjacencyrequest","title":"Solution for <code>VQSrequest</code> using genomic ranges (<code>VQSadjacencyRequest</code>)","text":"<p>This is a query for translocations between the MYC and IgH loci, where the breakpoints are loosely defined through there well known cytogenetic bands. The query here follows the VRS adjacency model. In contrast to the VRS representational model, here:    </p> <ul> <li>VRS uses an array of 2 genomic locations while Beacon names the location   parameters individually (using \"adjacency...\" for the second partner)    </li> <li>VRS explicitely encodes directionality by using either <code>start</code> or <code>end</code>   position parameters (integers or ranges) while this query example creates   non-directional ranges on both sides since directionality might not be known,   the storage system might not encode this or all options could be of interest    </li> </ul>"},{"location":"generated/requestProfiles_VQSadjacencyRequest/#request","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSadjacencyRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000008.11</code> </p> </li> <li> <p><code>start</code>: <code>116700000</code> </p> </li> <li> <p><code>end</code>: <code>145138636</code> </p> </li> <li> <p><code>adjacencyAccession</code>: <code>refseq:NC_000014.9</code> </p> </li> <li> <p><code>adjacencyStart</code>: <code>89300000</code> </p> </li> <li> <p><code>adjacencyEnd</code>: <code>107043718</code> </p> </li> <li> <p><code>vrsType</code>: <code>Adjacency</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSadjacencyRequest/#get-query-string","title":"GET query string","text":"<pre><code>?requestProfile=VQSadjacencyRequest&amp;referenceAccession=refseq:NC_000008.11&amp;start=116700000&amp;end=145138636&amp;adjacencyAccession=refseq:NC_000014.9&amp;adjacencyStart=89300000&amp;adjacencyEnd=107043718&amp;vrsType=Adjacency\n</code></pre>"},{"location":"generated/requestProfiles_VQSadjacencyRequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"adjacencyAccession\": \"refseq:NC_000014.9\",\n    \"adjacencyEnd\": 107043718,\n    \"adjacencyStart\": 89300000,\n    \"end\": 145138636,\n    \"referenceAccession\": \"refseq:NC_000008.11\",\n    \"requestProfile\": \"VQSadjacencyRequest\",\n    \"start\": 116700000,\n    \"vrsType\": \"Adjacency\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSalleleRequest/","title":"Request Profile: <code>VQSalleleRequest</code>","text":"<p>A Beacon v2+ sequence query. It is in its scope similar to the Beacon v1/v2 allele requests but replaces the original parameters with VRS v2 concepts.</p>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/","title":"Request Profile: <code>VQScopyChangeRequest</code>","text":"<p>A typical Beacon v2.n request for copy number variations (CNVs) queries approximate positions for CNV start and end regions through use of the <code>Range</code> type. The <code>copyChange</code> parameter indicates the relative change in genomic copy number (pls. refer to the class definition.)</p>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#copy-number-gains-involving-the-whole-locus-chr254700000-63900000","title":"Copy number gains involving the whole locus chr2:54,700,000-63,900,000","text":""},{"location":"generated/requestProfiles_VQScopyChangeRequest/#solution-for-vqsrequest-using-start-and-end-ranges-vqscopychangerequest","title":"Solution for <code>VQSrequest</code> using <code>start</code> and <code>end</code> ranges (<code>VQScopyChangeRequest</code>)","text":"<p>The query has to indicate the involved genomic region by positions as well as the type of change. Here, matched duplication events start 5` of the region and end 3` of it. For capturing any event upt to the complete chromosome duplication this requires knowledge about the maximum value (i.e. chromosome base length; using a random very large number might fail depending on the implementation).</p> <p>The example uses <code>\"copyChange\": \"EFO:0030070\"</code> for <code>copy number gain</code> as specified in the VRS definitions.</p>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#request","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQScopyChangeRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000002.12</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>0</code> </li> <li><code>54700000</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>63900000</code> </li> <li><code>242193529</code> </li> </ul> </li> <li> <p><code>copyChange</code>: <code>EFO:0030070</code> </p> </li> <li> <p><code>vrsType</code>: <code>CopyNumberChange</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#get-query-string","title":"GET query string","text":"<pre><code>?requestProfile=VQScopyChangeRequest&amp;referenceAccession=refseq:NC_000002.12&amp;start=0,54700000&amp;end=63900000,242193529&amp;copyChange=EFO:0030070&amp;vrsType=CopyNumberChange\n</code></pre>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"copyChange\": \"EFO:0030070\",\n    \"end\": [\n        63900000,\n        242193529\n    ],\n    \"referenceAccession\": \"refseq:NC_000002.12\",\n    \"requestProfile\": \"VQScopyChangeRequest\",\n    \"start\": [\n        0,\n        54700000\n    ],\n    \"vrsType\": \"CopyNumberChange\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#focal-high-level-deletion-involving-the-cdkn2a-locus","title":"Focal high-level deletion involving the CDKN2A locus","text":""},{"location":"generated/requestProfiles_VQScopyChangeRequest/#solution-for-vqsrequest-using-start-and-end-ranges-vqscopychangerequest_1","title":"Solution for <code>VQSrequest</code> using <code>start</code> and <code>end</code> ranges (<code>VQScopyChangeRequest</code>)","text":"<p>To match deletion variants overlapping the CDKN2A gene's coding region (CDR) with at least a single base, but limited to \"focal\" hits (here i.e. &lt;= ~2Mbp in size) a bracket query is constructed where the <code>start</code> range goes  from ~1Mb 5\\' of the CDKN2A CDR until the end of the CDR and the <code>end</code> range goes from the start of the CDR to ~1Mb 3\\' of the gene. </p> <p>The query uses <code>\"copyChange\": \"EFO:0020073\"</code> for <code>high-level copy number loss</code> as specified in the VRS definitions. With hierarchical expansion of this term explicit complete genomic deletions (<code>EFO:0030069</code>) should be retrieved too.</p>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#request_1","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQScopyChangeRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000002.12</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>21000001</code> </li> <li><code>21975098</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>21967753</code> </li> <li><code>23000000</code> </li> </ul> </li> <li> <p><code>copyChange</code>: <code>EFO:0020073</code> </p> </li> <li> <p><code>vrsType</code>: <code>CopyNumberChange</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#get-query-string_1","title":"GET query string","text":"<pre><code>?requestProfile=VQScopyChangeRequest&amp;referenceAccession=refseq:NC_000002.12&amp;start=21000001,21975098&amp;end=21967753,23000000&amp;copyChange=EFO:0020073&amp;vrsType=CopyNumberChange\n</code></pre>"},{"location":"generated/requestProfiles_VQScopyChangeRequest/#post-query-component_1","title":"POST query component","text":"<pre><code>{\n    \"copyChange\": \"EFO:0020073\",\n    \"end\": [\n        21967753,\n        23000000\n    ],\n    \"referenceAccession\": \"refseq:NC_000002.12\",\n    \"requestProfile\": \"VQScopyChangeRequest\",\n    \"start\": [\n        21000001,\n        21975098\n    ],\n    \"vrsType\": \"CopyNumberChange\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSgeneIdRequest/","title":"Request Profile: <code>VQSgeneIdRequest</code>","text":"<p>A typical Beacon v2.n request for gene queries, e.g. for the retrieval of all variants in a gene or variants restricted by additional parameters such as CNV type (<code>copyChange</code>) or length of the affected sequence. TODO: Evaluate to split into more basic <code>GeneIdRequest</code> and specialized       requests requiring an effect component.</p>"},{"location":"generated/requestProfiles_VQSgeneIdRequest/#query-for-a-focal-deletion-involving-tp53","title":"Query for a focal deletion involving TP53","text":""},{"location":"generated/requestProfiles_VQSgeneIdRequest/#solution-using-vqsgeneidrequest-with-geneid","title":"Solution using <code>VQSgeneIdRequest</code> with <code>geneId</code>","text":"<p>Query for a deletion involving TP53 by using the HUGO name to specify the gene. This request does not provide coordinates so on the server side matching has to be performed from annotated variants or by retrieving the gene's coordinates and creating internally a type of range request. Here we're also  limiting the size of the CNV to a typical \"focal deletion\" with a lower minimum size of 1kb (to avoid noise and non-structural variants) and an upper limit of 3Mb (to avoid large chromosomal deletions).</p>"},{"location":"generated/requestProfiles_VQSgeneIdRequest/#request","title":"Request","text":"<ul> <li> <p><code>requestType</code>: <code>VQSgeneIdRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>TP53</code> </p> </li> <li> <p><code>copyChange</code>: <code>EFO:0030067</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>1000</code> </li> <li><code>3000000</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>CopyNumberChange</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSgeneIdRequest/#get-query-string","title":"GET query string","text":"<pre><code>?requestType=VQSgeneIdRequest&amp;geneId=TP53&amp;copyChange=EFO:0030067&amp;sequenceLength=1000,3000000&amp;vrsType=CopyNumberChange\n</code></pre>"},{"location":"generated/requestProfiles_VQSgeneIdRequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"copyChange\": \"EFO:0030067\",\n    \"geneId\": \"TP53\",\n    \"requestType\": \"VQSgeneIdRequest\",\n    \"sequenceLength\": [\n        1000,\n        3000000\n    ],\n    \"vrsType\": \"CopyNumberChange\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSgeneMolecularEffectRequest/","title":"Request Profile: <code>VQSgeneMolecularEffectRequest</code>","text":"<p>A request for the variation consequence, e.g. for the molecular changes caused by the variant.</p>"},{"location":"generated/requestProfiles_VQSgeneMolecularEffectRequest/#todo","title":"TODO","text":"<ul> <li>Define a clear structure for how request types are constructed with a   primacy of where the variant is located or what happens. </li> </ul>"},{"location":"generated/requestProfiles_VQSgeneMolecularEffectRequest/#query-for-a-missense-variant-in-dmd","title":"Query for a missense variant in DMD","text":""},{"location":"generated/requestProfiles_VQSgeneMolecularEffectRequest/#using-vqsgenemoleculareffectrequest-with-geneid-and-moleculareffect","title":"Using <code>VQSgeneMolecularEffectRequest</code> with <code>geneId</code> and <code>molecularEffect</code>","text":"<p>Query for a missense mutation involving TP53 by using the HUGO name to specify the gene and the Sequence Ontology id to match missense mutations. This request requires that the server has indexed variants with molecular effects.</p>"},{"location":"generated/requestProfiles_VQSgeneMolecularEffectRequest/#request","title":"Request","text":"<ul> <li> <p><code>requestType</code>: <code>VQSgeneMolecularEffectRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>DMD</code> </p> </li> <li> <p><code>molecularEffect</code>: <code>SO:0001583</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSgeneMolecularEffectRequest/#get-query-string","title":"GET query string","text":"<pre><code>?requestType=VQSgeneMolecularEffectRequest&amp;geneId=DMD&amp;molecularEffect=SO:0001583\n</code></pre>"},{"location":"generated/requestProfiles_VQSgeneMolecularEffectRequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"geneId\": \"DMD\",\n    \"molecularEffect\": \"SO:0001583\",\n    \"requestType\": \"VQSgeneMolecularEffectRequest\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSlocationMolecularEffectRequest/","title":"Request Profile: <code>VQSlocationMolecularEffectRequest</code>","text":"<p>A request for the variation consequence, e.g. for the molecular changes caused by the variant, at a genomic location defined through coordinates.</p>"},{"location":"generated/requestProfiles_VQSmultivarRequest/","title":"Request Profile: <code>VQSmultivarRequest</code>","text":"<p>This multi variant query is a collection of individual variant queries based on the Beacon v2+ \"VQS\" query patterns. Status: Proposed for evaluation for Beacon v2.n or v3.0</p>"},{"location":"generated/requestProfiles_VQSrangeRequest/","title":"Request Profile: <code>VQSrangeRequest</code>","text":"<p>Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by <code>referenceAccession</code>, <code>start</code> and <code>end</code> parameters. Additional qualifiers such as <code>copyChange</code> or length of the affected sequence can be used to further restrict the returned results. For this request type usually <code>start</code> and <code>end</code> with a single position are used, i.e. a subset of the <code>start</code> and <code>end</code> specifications. However, </p>"},{"location":"generated/requestProfiles_VQSrangeRequest/#todo","title":"TODO","text":"<ul> <li>Evaluate to split into more basic <code>RangeRequest</code> and specialized   requests requiring an effect component</li> <li>Review current VRS v2 and upcoming versions for optoions to express   types of variants beyond the <code>copyChange</code> parameter</li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/","title":"Beacon VQS Requests","text":"<p>The <code>VQSrequest</code> type represents the generic collection of variant parameters supported in Beacon v2+ requests. These include parameters with close alignment to VRS v2 concepts and replacing some Beacon v1/v2 generics with tighter definitions (e.g. <code>referenceAccession</code> instead of <code>referenceName</code> and <code>accession</code> or <code>copyChange</code> for a specific subset of former <code>variantType</code> values) but also keep some conceptsm beyond VRS scope or specifically geared towards query applications (<code>geneId</code>, <code>sequenceLength</code>)</p> <p>For the parameter definitions please see the <code>requestParameterComponents</code> page.</p>"},{"location":"generated/requestProfiles_VQSrequest/#vqsrequest-parameters","title":"VQSrequest Parameters","text":""},{"location":"generated/requestProfiles_VQSrequest/#requestprofile-requestparametercomponentsyamldefsrequestprofileid","title":"<code>requestProfile</code>: ./requestParameterComponents.yaml#/$defs/RequestProfileId","text":""},{"location":"generated/requestProfiles_VQSrequest/#referenceaccession-requestparametercomponentsyamldefsrefgetaccession","title":"<code>referenceAccession</code>: ./requestParameterComponents.yaml#/$defs/RefgetAccession","text":""},{"location":"generated/requestProfiles_VQSrequest/#startpos-requestparametercomponentsyamldefssequencestart","title":"<code>startPos</code>: ./requestParameterComponents.yaml#/$defs/SequenceStart","text":""},{"location":"generated/requestProfiles_VQSrequest/#endpos-requestparametercomponentsyamldefssequenceend","title":"<code>endPos</code>: ./requestParameterComponents.yaml#/$defs/SequenceEnd","text":""},{"location":"generated/requestProfiles_VQSrequest/#startrange-requestparametercomponentsyamldefsrange","title":"<code>startRange</code>: ./requestParameterComponents.yaml#/$defs/Range","text":""},{"location":"generated/requestProfiles_VQSrequest/#endrange-requestparametercomponentsyamldefsrange","title":"<code>endRange</code>: ./requestParameterComponents.yaml#/$defs/Range","text":""},{"location":"generated/requestProfiles_VQSrequest/#sequence-requestparametercomponentsyamldefssequence","title":"<code>sequence</code>: ./requestParameterComponents.yaml#/$defs/Sequence","text":""},{"location":"generated/requestProfiles_VQSrequest/#copychange-requestparametercomponentsyamldefscopychange","title":"<code>copyChange</code>: ./requestParameterComponents.yaml#/$defs/CopyChange","text":""},{"location":"generated/requestProfiles_VQSrequest/#adjacencyaccession-requestparametercomponentsyamldefsadjacencyaccession","title":"<code>adjacencyAccession</code>: ./requestParameterComponents.yaml#/$defs/AdjacencyAccession","text":""},{"location":"generated/requestProfiles_VQSrequest/#adjacencyrange-requestparametercomponentsyamldefsrange","title":"<code>adjacencyRange</code>: ./requestParameterComponents.yaml#/$defs/Range","text":""},{"location":"generated/requestProfiles_VQSrequest/#repeatsubunitcount-requestparametercomponentsyamldefsrepeatsubunitcount","title":"<code>repeatSubunitCount</code>: ./requestParameterComponents.yaml#/$defs/RepeatSubunitCount","text":""},{"location":"generated/requestProfiles_VQSrequest/#repeatsubunitlength-requestparametercomponentsyamldefsrepeatsubunitlength","title":"<code>repeatSubunitLength</code>: ./requestParameterComponents.yaml#/$defs/RepeatSubunitLength","text":""},{"location":"generated/requestProfiles_VQSrequest/#geneid-requestparametercomponentsyamldefsgeneid","title":"<code>geneId</code>: ./requestParameterComponents.yaml#/$defs/GeneId","text":""},{"location":"generated/requestProfiles_VQSrequest/#aminoacidchange-requestparametercomponentsyamldefsaminoacidchange","title":"<code>aminoacidChange</code>: ./requestParameterComponents.yaml#/$defs/AminoacidChange","text":""},{"location":"generated/requestProfiles_VQSrequest/#genomicalleleshortform-requestparametercomponentsyamldefsgenomicalleleshortform","title":"<code>genomicAlleleShortForm</code>: ./requestParameterComponents.yaml#/$defs/GenomicAlleleShortForm","text":""},{"location":"generated/requestProfiles_VQSrequest/#sequencelength-requestparametercomponentsyamldefssequencelength","title":"<code>sequenceLength</code>: ./requestParameterComponents.yaml#/$defs/SequenceLength","text":""},{"location":"generated/requestProfiles_VQSrequest/#vrstype-requestparametercomponentsyamldefsvrstype","title":"<code>vrsType</code>: ./requestParameterComponents.yaml#/$defs/VRStype","text":""},{"location":"generated/requestProfiles_VQSrequest/#genomicfeature-requestparametercomponentsyamldefsgenomicfeature","title":"<code>genomicFeature</code>: ./requestParameterComponents.yaml#/$defs/GenomicFeature","text":""},{"location":"generated/requestProfiles_VQSrequest/#moleculareffect-requestparametercomponentsyamldefsmoleculareffect","title":"<code>molecularEffect</code>: ./requestParameterComponents.yaml#/$defs/MolecularEffect","text":""},{"location":"generated/requestProfiles_VQSrequest/#phenocliniceffect-requestparametercomponentsyamldefsphenocliniceffect","title":"<code>phenoClinicEffect</code>: ./requestParameterComponents.yaml#/$defs/PhenoClinicEffect","text":""},{"location":"generated/requestProfiles_VQSrequest/#beacon-v2vqs-vrsified-request-examples","title":"Beacon v2+/VQS \"VRSified\" Request Examples","text":""},{"location":"generated/requestProfiles_VQSrequest/#copy-number-gains-involving-the-whole-locus-chr254700000-63900000","title":"Copy number gains involving the whole locus chr2:54,700,000-63,900,000","text":""},{"location":"generated/requestProfiles_VQSrequest/#solution-for-vqsrequest-using-start-and-end-ranges-vqscopychangerequest","title":"Solution for <code>VQSrequest</code> using <code>start</code> and <code>end</code> ranges (<code>VQScopyChangeRequest</code>)","text":"<p>The query has to indicate the involved genomic region by positions as well as the type of change. Here, matched duplication events start 5` of the region and end 3` of it. For capturing any event upt to the complete chromosome duplication this requires knowledge about the maximum value (i.e. chromosome base length; using a random very large number might fail depending on the implementation).</p> <p>The example uses <code>\"copyChange\": \"EFO:0030070\"</code> for <code>copy number gain</code> as specified in the VRS definitions.</p>"},{"location":"generated/requestProfiles_VQSrequest/#request","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQScopyChangeRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000002.12</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>0</code> </li> <li><code>54700000</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>63900000</code> </li> <li><code>242193529</code> </li> </ul> </li> <li> <p><code>copyChange</code>: <code>EFO:0030070</code> </p> </li> <li> <p><code>vrsType</code>: <code>CopyNumberChange</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string","title":"GET query string","text":"<pre><code>?requestProfile=VQScopyChangeRequest&amp;referenceAccession=refseq:NC_000002.12&amp;start=0,54700000&amp;end=63900000,242193529&amp;copyChange=EFO:0030070&amp;vrsType=CopyNumberChange\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"copyChange\": \"EFO:0030070\",\n    \"end\": [\n        63900000,\n        242193529\n    ],\n    \"referenceAccession\": \"refseq:NC_000002.12\",\n    \"requestProfile\": \"VQScopyChangeRequest\",\n    \"start\": [\n        0,\n        54700000\n    ],\n    \"vrsType\": \"CopyNumberChange\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#focal-high-level-deletion-involving-the-cdkn2a-locus","title":"Focal high-level deletion involving the CDKN2A locus","text":""},{"location":"generated/requestProfiles_VQSrequest/#solution-for-vqsrequest-using-start-and-end-ranges-vqscopychangerequest_1","title":"Solution for <code>VQSrequest</code> using <code>start</code> and <code>end</code> ranges (<code>VQScopyChangeRequest</code>)","text":"<p>To match deletion variants overlapping the CDKN2A gene's coding region (CDR) with at least a single base, but limited to \"focal\" hits (here i.e. &lt;= ~2Mbp in size) a bracket query is constructed where the <code>start</code> range goes  from ~1Mb 5\\' of the CDKN2A CDR until the end of the CDR and the <code>end</code> range goes from the start of the CDR to ~1Mb 3\\' of the gene. </p> <p>The query uses <code>\"copyChange\": \"EFO:0020073\"</code> for <code>high-level copy number loss</code> as specified in the VRS definitions. With hierarchical expansion of this term explicit complete genomic deletions (<code>EFO:0030069</code>) should be retrieved too.</p>"},{"location":"generated/requestProfiles_VQSrequest/#request_1","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQScopyChangeRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000002.12</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>21000001</code> </li> <li><code>21975098</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>21967753</code> </li> <li><code>23000000</code> </li> </ul> </li> <li> <p><code>copyChange</code>: <code>EFO:0020073</code> </p> </li> <li> <p><code>vrsType</code>: <code>CopyNumberChange</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string_1","title":"GET query string","text":"<pre><code>?requestProfile=VQScopyChangeRequest&amp;referenceAccession=refseq:NC_000002.12&amp;start=21000001,21975098&amp;end=21967753,23000000&amp;copyChange=EFO:0020073&amp;vrsType=CopyNumberChange\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component_1","title":"POST query component","text":"<pre><code>{\n    \"copyChange\": \"EFO:0020073\",\n    \"end\": [\n        21967753,\n        23000000\n    ],\n    \"referenceAccession\": \"refseq:NC_000002.12\",\n    \"requestProfile\": \"VQScopyChangeRequest\",\n    \"start\": [\n        21000001,\n        21975098\n    ],\n    \"vrsType\": \"CopyNumberChange\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#query-for-a-missense-variant-in-dmd","title":"Query for a missense variant in DMD","text":""},{"location":"generated/requestProfiles_VQSrequest/#using-vqsgenemoleculareffectrequest-with-geneid-and-moleculareffect","title":"Using <code>VQSgeneMolecularEffectRequest</code> with <code>geneId</code> and <code>molecularEffect</code>","text":"<p>Query for a missense mutation involving TP53 by using the HUGO name to specify the gene and the Sequence Ontology id to match missense mutations. This request requires that the server has indexed variants with molecular effects.</p>"},{"location":"generated/requestProfiles_VQSrequest/#request_2","title":"Request","text":"<ul> <li> <p><code>requestType</code>: <code>VQSgeneMolecularEffectRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>DMD</code> </p> </li> <li> <p><code>molecularEffect</code>: <code>SO:0001583</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string_2","title":"GET query string","text":"<pre><code>?requestType=VQSgeneMolecularEffectRequest&amp;geneId=DMD&amp;molecularEffect=SO:0001583\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component_2","title":"POST query component","text":"<pre><code>{\n    \"geneId\": \"DMD\",\n    \"molecularEffect\": \"SO:0001583\",\n    \"requestType\": \"VQSgeneMolecularEffectRequest\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#find-t814q24q32-translocations","title":"Find  t(8;14)(q24;q32) translocations","text":""},{"location":"generated/requestProfiles_VQSrequest/#solution-for-vqsrequest-using-genomic-ranges-vqsadjacencyrequest","title":"Solution for <code>VQSrequest</code> using genomic ranges (<code>VQSadjacencyRequest</code>)","text":"<p>This is a query for translocations between the MYC and IgH loci, where the breakpoints are loosely defined through there well known cytogenetic bands. The query here follows the VRS adjacency model. In contrast to the VRS representational model, here:    </p> <ul> <li>VRS uses an array of 2 genomic locations while Beacon names the location   parameters individually (using \"adjacency...\" for the second partner)    </li> <li>VRS explicitely encodes directionality by using either <code>start</code> or <code>end</code>   position parameters (integers or ranges) while this query example creates   non-directional ranges on both sides since directionality might not be known,   the storage system might not encode this or all options could be of interest    </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#request_3","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSadjacencyRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000008.11</code> </p> </li> <li> <p><code>start</code>: <code>116700000</code> </p> </li> <li> <p><code>end</code>: <code>145138636</code> </p> </li> <li> <p><code>adjacencyAccession</code>: <code>refseq:NC_000014.9</code> </p> </li> <li> <p><code>adjacencyStart</code>: <code>89300000</code> </p> </li> <li> <p><code>adjacencyEnd</code>: <code>107043718</code> </p> </li> <li> <p><code>vrsType</code>: <code>Adjacency</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string_3","title":"GET query string","text":"<pre><code>?requestProfile=VQSadjacencyRequest&amp;referenceAccession=refseq:NC_000008.11&amp;start=116700000&amp;end=145138636&amp;adjacencyAccession=refseq:NC_000014.9&amp;adjacencyStart=89300000&amp;adjacencyEnd=107043718&amp;vrsType=Adjacency\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component_3","title":"POST query component","text":"<pre><code>{\n    \"adjacencyAccession\": \"refseq:NC_000014.9\",\n    \"adjacencyEnd\": 107043718,\n    \"adjacencyStart\": 89300000,\n    \"end\": 145138636,\n    \"referenceAccession\": \"refseq:NC_000008.11\",\n    \"requestProfile\": \"VQSadjacencyRequest\",\n    \"start\": 116700000,\n    \"vrsType\": \"Adjacency\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#cag-repeat-in-the-first-exon-of-the-huntingtin-gene-htt","title":"<code>CAG</code> repeat in the first exon of the huntingtin gene (HTT)","text":"<p>The gene HTT is located at position 4p16.3. In individuals without Huntington's disease, this CAG segment is typically repeated 10 to 35 times. Expansions beyond 35 copys are associated with the development of Huntington's disease.</p> <p>Examples for query parameters are:    </p> <ul> <li>GeneId: HTT   </li> <li>referenceAccession: refseq:NC_000004.12   </li> <li>start: 3074681    </li> <li>end: 3243960    </li> <li>RepeatSubunitLength: 3 (CAG)    </li> <li>RepeatSubunitCount: [36, 250] (not yet defined in VRS or Beacon)    </li> <li>SequenceLength:  [105, 750]    </li> </ul> <p>See also the genome browser material.</p>"},{"location":"generated/requestProfiles_VQSrequest/#solution-using-vqssequencerepeatrequest-with-locus-and-sequencelength","title":"Solution using <code>VQSsequenceRepeatRequest</code> with locus and <code>sequenceLength</code>","text":"<p>This example uses the HTT genome position and a range of (extended) sequence lengths to match against a <code>ReferenceLengthExpression</code> since the VRS v2 model does not contain a \"repeat count\" concept but only the overall length and unit length (as well as the sequence).</p> <p>TODO: Limit location to first exon?</p>"},{"location":"generated/requestProfiles_VQSrequest/#request_4","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSsequenceRepeatRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000004.12</code> </p> </li> <li> <p><code>start</code>: <code>3074681</code> </p> </li> <li> <p><code>end</code>: <code>3243960</code> </p> </li> <li> <p><code>repeatSubunitLength</code>: <code>3</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>105</code> </li> <li><code>750</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>ReferenceLengthExpression</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string_4","title":"GET query string","text":"<pre><code>?requestProfile=VQSsequenceRepeatRequest&amp;referenceAccession=refseq:NC_000004.12&amp;start=3074681&amp;end=3243960&amp;repeatSubunitLength=3&amp;sequenceLength=105,750&amp;vrsType=ReferenceLengthExpression\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component_4","title":"POST query component","text":"<pre><code>{\n    \"end\": 3243960,\n    \"referenceAccession\": \"refseq:NC_000004.12\",\n    \"repeatSubunitLength\": 3,\n    \"requestProfile\": \"VQSsequenceRepeatRequest\",\n    \"sequenceLength\": [\n        105,\n        750\n    ],\n    \"start\": 3074681,\n    \"vrsType\": \"ReferenceLengthExpression\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#cag-repeat-in-the-first-exon-of-the-huntingtin-gene-htt_1","title":"<code>CAG</code> repeat in the first exon of the huntingtin gene (HTT)","text":"<p>For details see above. </p>"},{"location":"generated/requestProfiles_VQSrequest/#solution-using-vqssequencerepeatrequest-with-geneid-and-sequencelength","title":"Solution using <code>VQSsequenceRepeatRequest</code> with <code>geneId</code> and <code>sequenceLength</code>","text":"<p>Here instead of the position simply the gene symbol is being used.</p>"},{"location":"generated/requestProfiles_VQSrequest/#request_5","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSsequenceRepeatRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>HTT</code> </p> </li> <li> <p><code>repeatSubunitLength</code>: <code>3</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>105</code> </li> <li><code>750</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>ReferenceLengthExpression</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string_5","title":"GET query string","text":"<pre><code>?requestProfile=VQSsequenceRepeatRequest&amp;geneId=HTT&amp;repeatSubunitLength=3&amp;sequenceLength=105,750&amp;vrsType=ReferenceLengthExpression\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component_5","title":"POST query component","text":"<pre><code>{\n    \"geneId\": \"HTT\",\n    \"repeatSubunitLength\": 3,\n    \"requestProfile\": \"VQSsequenceRepeatRequest\",\n    \"sequenceLength\": [\n        105,\n        750\n    ],\n    \"vrsType\": \"ReferenceLengthExpression\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#cgg-trinucleotide-repeat-expansion-in-the-fmr1-gene","title":"<code>CGG</code> trinucleotide repeat expansion in the FMR1 gene","text":"<p>A <code>CGG</code> trinucleotide repeat expansion in the FMR1 gene on the X chromosome (Xq27.3) is known to cause Fragile X Syndrome (FXS). CGG repeating less than 44 times are stable across generations.</p>"},{"location":"generated/requestProfiles_VQSrequest/#solution-using-vqssequencerepeatrequest-with-geneid-and-sequencelength_1","title":"Solution using <code>VQSsequenceRepeatRequest</code> with <code>geneId</code> and <code>sequenceLength</code>","text":"<p>Similarly to the <code>HTT</code> example here a <code>geneId</code> is used to specify the gene and a range of sequence lengths is used to match against a <code>ReferenceLengthExpression</code>.</p>"},{"location":"generated/requestProfiles_VQSrequest/#request_6","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSsequenceRepeatRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>FMR1</code> </p> </li> <li> <p><code>repeatSubunitLength</code>: <code>3</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>130</code> </li> <li><code>600</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>ReferenceLengthExpression</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string_6","title":"GET query string","text":"<pre><code>?requestProfile=VQSsequenceRepeatRequest&amp;geneId=FMR1&amp;repeatSubunitLength=3&amp;sequenceLength=130,600&amp;vrsType=ReferenceLengthExpression\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component_6","title":"POST query component","text":"<pre><code>{\n    \"geneId\": \"FMR1\",\n    \"repeatSubunitLength\": 3,\n    \"requestProfile\": \"VQSsequenceRepeatRequest\",\n    \"sequenceLength\": [\n        130,\n        600\n    ],\n    \"vrsType\": \"ReferenceLengthExpression\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#query-for-a-focal-deletion-involving-tp53","title":"Query for a focal deletion involving TP53","text":""},{"location":"generated/requestProfiles_VQSrequest/#solution-using-vqsgeneidrequest-with-geneid","title":"Solution using <code>VQSgeneIdRequest</code> with <code>geneId</code>","text":"<p>Query for a deletion involving TP53 by using the HUGO name to specify the gene. This request does not provide coordinates so on the server side matching has to be performed from annotated variants or by retrieving the gene's coordinates and creating internally a type of range request. Here we're also  limiting the size of the CNV to a typical \"focal deletion\" with a lower minimum size of 1kb (to avoid noise and non-structural variants) and an upper limit of 3Mb (to avoid large chromosomal deletions).</p>"},{"location":"generated/requestProfiles_VQSrequest/#request_7","title":"Request","text":"<ul> <li> <p><code>requestType</code>: <code>VQSgeneIdRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>TP53</code> </p> </li> <li> <p><code>copyChange</code>: <code>EFO:0030067</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>1000</code> </li> <li><code>3000000</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>CopyNumberChange</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSrequest/#get-query-string_7","title":"GET query string","text":"<pre><code>?requestType=VQSgeneIdRequest&amp;geneId=TP53&amp;copyChange=EFO:0030067&amp;sequenceLength=1000,3000000&amp;vrsType=CopyNumberChange\n</code></pre>"},{"location":"generated/requestProfiles_VQSrequest/#post-query-component_7","title":"POST query component","text":"<pre><code>{\n    \"copyChange\": \"EFO:0030067\",\n    \"geneId\": \"TP53\",\n    \"requestType\": \"VQSgeneIdRequest\",\n    \"sequenceLength\": [\n        1000,\n        3000000\n    ],\n    \"vrsType\": \"CopyNumberChange\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/","title":"Request Profile: <code>VQSsequenceRepeatRequest</code>","text":"<p>A Beacon v2.n request for sequence repeat queries, e.g. for the retrieval of tandem repeat expansions or other sequence repeat events.</p>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#cag-repeat-in-the-first-exon-of-the-huntingtin-gene-htt","title":"<code>CAG</code> repeat in the first exon of the huntingtin gene (HTT)","text":"<p>The gene HTT is located at position 4p16.3. In individuals without Huntington's disease, this CAG segment is typically repeated 10 to 35 times. Expansions beyond 35 copys are associated with the development of Huntington's disease.</p> <p>Examples for query parameters are:    </p> <ul> <li>GeneId: HTT   </li> <li>referenceAccession: refseq:NC_000004.12   </li> <li>start: 3074681    </li> <li>end: 3243960    </li> <li>RepeatSubunitLength: 3 (CAG)    </li> <li>RepeatSubunitCount: [36, 250] (not yet defined in VRS or Beacon)    </li> <li>SequenceLength:  [105, 750]    </li> </ul> <p>See also the genome browser material.</p>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#solution-using-vqssequencerepeatrequest-with-locus-and-sequencelength","title":"Solution using <code>VQSsequenceRepeatRequest</code> with locus and <code>sequenceLength</code>","text":"<p>This example uses the HTT genome position and a range of (extended) sequence lengths to match against a <code>ReferenceLengthExpression</code> since the VRS v2 model does not contain a \"repeat count\" concept but only the overall length and unit length (as well as the sequence).</p> <p>TODO: Limit location to first exon?</p>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#request","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSsequenceRepeatRequest</code> </p> </li> <li> <p><code>referenceAccession</code>: <code>refseq:NC_000004.12</code> </p> </li> <li> <p><code>start</code>: <code>3074681</code> </p> </li> <li> <p><code>end</code>: <code>3243960</code> </p> </li> <li> <p><code>repeatSubunitLength</code>: <code>3</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>105</code> </li> <li><code>750</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>ReferenceLengthExpression</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#get-query-string","title":"GET query string","text":"<pre><code>?requestProfile=VQSsequenceRepeatRequest&amp;referenceAccession=refseq:NC_000004.12&amp;start=3074681&amp;end=3243960&amp;repeatSubunitLength=3&amp;sequenceLength=105,750&amp;vrsType=ReferenceLengthExpression\n</code></pre>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"end\": 3243960,\n    \"referenceAccession\": \"refseq:NC_000004.12\",\n    \"repeatSubunitLength\": 3,\n    \"requestProfile\": \"VQSsequenceRepeatRequest\",\n    \"sequenceLength\": [\n        105,\n        750\n    ],\n    \"start\": 3074681,\n    \"vrsType\": \"ReferenceLengthExpression\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#cag-repeat-in-the-first-exon-of-the-huntingtin-gene-htt_1","title":"<code>CAG</code> repeat in the first exon of the huntingtin gene (HTT)","text":"<p>For details see above. </p>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#solution-using-vqssequencerepeatrequest-with-geneid-and-sequencelength","title":"Solution using <code>VQSsequenceRepeatRequest</code> with <code>geneId</code> and <code>sequenceLength</code>","text":"<p>Here instead of the position simply the gene symbol is being used.</p>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#request_1","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSsequenceRepeatRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>HTT</code> </p> </li> <li> <p><code>repeatSubunitLength</code>: <code>3</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>105</code> </li> <li><code>750</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>ReferenceLengthExpression</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#get-query-string_1","title":"GET query string","text":"<pre><code>?requestProfile=VQSsequenceRepeatRequest&amp;geneId=HTT&amp;repeatSubunitLength=3&amp;sequenceLength=105,750&amp;vrsType=ReferenceLengthExpression\n</code></pre>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#post-query-component_1","title":"POST query component","text":"<pre><code>{\n    \"geneId\": \"HTT\",\n    \"repeatSubunitLength\": 3,\n    \"requestProfile\": \"VQSsequenceRepeatRequest\",\n    \"sequenceLength\": [\n        105,\n        750\n    ],\n    \"vrsType\": \"ReferenceLengthExpression\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#cgg-trinucleotide-repeat-expansion-in-the-fmr1-gene","title":"<code>CGG</code> trinucleotide repeat expansion in the FMR1 gene","text":"<p>A <code>CGG</code> trinucleotide repeat expansion in the FMR1 gene on the X chromosome (Xq27.3) is known to cause Fragile X Syndrome (FXS). CGG repeating less than 44 times are stable across generations.</p>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#solution-using-vqssequencerepeatrequest-with-geneid-and-sequencelength_1","title":"Solution using <code>VQSsequenceRepeatRequest</code> with <code>geneId</code> and <code>sequenceLength</code>","text":"<p>Similarly to the <code>HTT</code> example here a <code>geneId</code> is used to specify the gene and a range of sequence lengths is used to match against a <code>ReferenceLengthExpression</code>.</p>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#request_2","title":"Request","text":"<ul> <li> <p><code>requestProfile</code>: <code>VQSsequenceRepeatRequest</code> </p> </li> <li> <p><code>geneId</code>: <code>FMR1</code> </p> </li> <li> <p><code>repeatSubunitLength</code>: <code>3</code> </p> </li> <li> <p><code>sequenceLength</code>:     </p> <ul> <li><code>130</code> </li> <li><code>600</code> </li> </ul> </li> <li> <p><code>vrsType</code>: <code>ReferenceLengthExpression</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#get-query-string_2","title":"GET query string","text":"<pre><code>?requestProfile=VQSsequenceRepeatRequest&amp;geneId=FMR1&amp;repeatSubunitLength=3&amp;sequenceLength=130,600&amp;vrsType=ReferenceLengthExpression\n</code></pre>"},{"location":"generated/requestProfiles_VQSsequenceRepeatRequest/#post-query-component_2","title":"POST query component","text":"<pre><code>{\n    \"geneId\": \"FMR1\",\n    \"repeatSubunitLength\": 3,\n    \"requestProfile\": \"VQSsequenceRepeatRequest\",\n    \"sequenceLength\": [\n        130,\n        600\n    ],\n    \"vrsType\": \"ReferenceLengthExpression\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_VQSsequenceRequest/","title":"Request Profile: <code>VQSalleleRequest</code>","text":"<p>A Beacon v2+ sequence query. It is in its scope similar to the Beacon v1/v2 allele requests but replaces the original parameters with VRS v2 concepts.</p>"},{"location":"generated/requestProfiles_VQSterminusRequest/","title":"Request Profile: <code>VQSterminusRequest</code>","text":"<p>A Beacon v2.n request for a sequence terminus, i.e. the end of a sequence. An example would be the match of chromosomal breakpoints terminating the derived chromosome w/o resulting sequence fusion.</p> <p>TODO: As in adjacency requests one could use <code>startRange</code> or <code>endRange</code> to limit the side of the breakpoint.</p>"},{"location":"generated/requestProfiles_aminoacidChangeRequest/","title":"Request Profile: <code>aminoacidChangeRequest</code>","text":"<p>A Beacon v2 request for amino acid change queries, e.g. for the retrieval of all variants leading to specific amino acid change. The request may be restricted by additionally providing the gene ID.</p>"},{"location":"generated/requestProfiles_g_variant/","title":"Beacon v2 Requests","text":"<p>This represents the generic collection of variant parameters allowed in Beacon v2 requests.</p> <p>For the parameter definitions please see the <code>requestParameterComponents</code> page.</p> <p>Please note that the properties here - while identical to the parameters of the v2 query parameter definitions - have all been re-written as individual, referenced definitions for better re-use and readability (e.g. <code>alternateBases</code> is defined through <code>AlternateBases</code> which again references <code>Sequence</code>.</p>"},{"location":"generated/requestProfiles_g_variant/#g_variant-parameters","title":"g_variant Parameters","text":""},{"location":"generated/requestProfiles_g_variant/#assemblyid-requestparametercomponentsyamldefsassembly","title":"<code>assemblyId</code>: ./requestParameterComponents.yaml#/$defs/Assembly","text":""},{"location":"generated/requestProfiles_g_variant/#referencename-requestparametercomponentsyamldefsrefseqid","title":"<code>referenceName</code>: ./requestParameterComponents.yaml#/$defs/RefSeqId","text":""},{"location":"generated/requestProfiles_g_variant/#referencebases-requestparametercomponentsyamldefsreferencebases","title":"<code>referenceBases</code>: ./requestParameterComponents.yaml#/$defs/ReferenceBases","text":""},{"location":"generated/requestProfiles_g_variant/#alternatebases-requestparametercomponentsyamldefsalternatebases","title":"<code>alternateBases</code>: ./requestParameterComponents.yaml#/$defs/AlternateBases","text":""},{"location":"generated/requestProfiles_g_variant/#varianttype-requestparametercomponentsyamldefsvarianttype","title":"<code>variantType</code>: ./requestParameterComponents.yaml#/$defs/VariantType","text":""},{"location":"generated/requestProfiles_g_variant/#start-requestparametercomponentsyamldefsstart","title":"<code>start</code>: ./requestParameterComponents.yaml#/$defs/Start","text":""},{"location":"generated/requestProfiles_g_variant/#end-requestparametercomponentsyamldefsend","title":"<code>end</code>: ./requestParameterComponents.yaml#/$defs/End","text":""},{"location":"generated/requestProfiles_g_variant/#geneid-requestparametercomponentsyamldefsgeneid","title":"<code>geneId</code>: ./requestParameterComponents.yaml#/$defs/GeneId","text":""},{"location":"generated/requestProfiles_g_variant/#aminoacidchange-requestparametercomponentsyamldefsaminoacidchange","title":"<code>aminoacidChange</code>: ./requestParameterComponents.yaml#/$defs/AminoacidChange","text":""},{"location":"generated/requestProfiles_g_variant/#genomicalleleshortform-requestparametercomponentsyamldefsgenomicalleleshortform","title":"<code>genomicAlleleShortForm</code>: ./requestParameterComponents.yaml#/$defs/GenomicAlleleShortForm","text":""},{"location":"generated/requestProfiles_g_variant/#variantminlength-requestparametercomponentsyamldefsvariantminlength","title":"<code>variantMinLength</code>: ./requestParameterComponents.yaml#/$defs/VariantMinLength","text":""},{"location":"generated/requestProfiles_g_variant/#variantmaxlength-requestparametercomponentsyamldefsvariantmaxlength","title":"<code>variantMaxLength</code>: ./requestParameterComponents.yaml#/$defs/VariantMaxLength","text":""},{"location":"generated/requestProfiles_g_variant/#beacon-v2-request-examples","title":"Beacon v2 Request Examples","text":""},{"location":"generated/requestProfiles_g_variant/#find-small-variable-sequence-insertionsdeletions-at-an-approximate-position","title":"Find small, variable sequence insertions/deletions at an approximate position","text":""},{"location":"generated/requestProfiles_g_variant/#solution-g_variant-with-start-and-end-ranges-bv2bracketrequest","title":"Solution <code>g_variant</code> with <code>start</code> and <code>end</code> ranges (<code>BV2bracketRequest</code>)","text":"<p>and <code>variantType</code></p> <p>Here sequence variants (insertions or deletions) involving a specific region on chromosome 17 but of varying length are matched by using \"fuzzy\" start  and end ranges (\"brackets\"). The variant type is identified as an INDEL although the interpretation is left to the implementation; e.g. an insertion which is stored as sequence change <code>17:43045708:A&gt;AAACAAAC</code> would fulfill the request but might not be indicated as <code>INDEL</code> type.</p>"},{"location":"generated/requestProfiles_g_variant/#request","title":"Request","text":"<ul> <li> <p><code>assemblyId</code>: <code>GRCh38</code> </p> </li> <li> <p><code>referenceName</code>: <code>17</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>43045703</code> </li> <li><code>43045709</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>43045715</code> </li> <li><code>43045720</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>INDEL</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_g_variant/#get-query-string","title":"GET query string","text":"<pre><code>?assemblyId=GRCh38&amp;referenceName=17&amp;start=43045703,43045709&amp;end=43045715,43045720&amp;variantType=INDEL\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#post-query-component","title":"POST query component","text":"<pre><code>{\n    \"assemblyId\": \"GRCh38\",\n    \"end\": [\n        43045715,\n        43045720\n    ],\n    \"referenceName\": 17,\n    \"start\": [\n        43045703,\n        43045709\n    ],\n    \"variantType\": \"INDEL\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#copy-number-gains-involving-the-whole-locus-chr254700000-63900000","title":"Copy number gains involving the whole locus chr2:54,700,000-63,900,000","text":""},{"location":"generated/requestProfiles_g_variant/#solution-for-g_variant-using-start-and-end-ranges-bv2bracketrequest","title":"Solution for <code>g_variant</code> using <code>start</code> and <code>end</code> ranges (<code>BV2bracketRequest</code>)","text":"<p>The query has to indicate the involved genomic region by positions as well as the type of change. Here, matched duplication events start 5` of the region and end 3` of it. For capturing any event upt to the complete chromosome duplication this requires knowledge about the maximum value (i.e. chromosome base length; using a random very large number might fail depending on the implementation).</p> <p>The example uses <code>EFO:0030070</code> for <code>copy number gain</code> instead of the alternative <code>SO:0001742</code> <code>copy_number_gain</code> or the VCF <code>DUP</code> as the preferred since the EFO terms provide a more granular expressivity and are referenced in the VRS definitions.</p>"},{"location":"generated/requestProfiles_g_variant/#request_1","title":"Request","text":"<ul> <li> <p><code>assemblyId</code>: <code>GRCh38</code> </p> </li> <li> <p><code>referenceName</code>: <code>refseq:NC_000002.12</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>0</code> </li> <li><code>54700000</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>63900000</code> </li> <li><code>242193529</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>EFO:0030070</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_g_variant/#get-query-string_1","title":"GET query string","text":"<pre><code>?assemblyId=GRCh38&amp;referenceName=refseq:NC_000002.12&amp;start=0,54700000&amp;end=63900000,242193529&amp;variantType=EFO:0030070\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#post-query-component_1","title":"POST query component","text":"<pre><code>{\n    \"assemblyId\": \"GRCh38\",\n    \"end\": [\n        63900000,\n        242193529\n    ],\n    \"referenceName\": \"refseq:NC_000002.12\",\n    \"start\": [\n        0,\n        54700000\n    ],\n    \"variantType\": \"EFO:0030070\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#find-variants-overlapping-an-approximate-sequence-location","title":"Find variants overlapping an approximate sequence location","text":""},{"location":"generated/requestProfiles_g_variant/#solution-g_variant-with-range-indicated-by-single-start-and-end-positions-bv2rangerequest","title":"Solution <code>g_variant</code> with range indicated by single <code>start</code> and <code>end</code> positions (<code>BV2rangeRequest</code>)","text":"<p>and <code>variantType</code></p> <p>Here sequence variants at a specifiied region on chromosome 2 are matched by using single start and end positions to indicate the genomic range.</p> <p>CAVE: Since no variant type is indicated such a query can potentially match a large number of variants, depending on the beacon's content and query interpretation (e.g. \"any\" overlap of a CNV could be matched unless the variant type is required for CNV queries).</p>"},{"location":"generated/requestProfiles_g_variant/#request_2","title":"Request","text":"<ul> <li> <p><code>assemblyId</code>: <code>GRCh38</code> </p> </li> <li> <p><code>referenceName</code>: <code>17</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>345675</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>345681</code> </li> </ul> </li> </ul>"},{"location":"generated/requestProfiles_g_variant/#get-query-string_2","title":"GET query string","text":"<pre><code>?assemblyId=GRCh38&amp;referenceName=17&amp;start=345675&amp;end=345681\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#post-query-component_2","title":"POST query component","text":"<pre><code>{\n    \"assemblyId\": \"GRCh38\",\n    \"end\": [\n        345681\n    ],\n    \"referenceName\": \"17\",\n    \"start\": [\n        345675\n    ]\n}\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#query-for-a-deletion-involving-tp53","title":"Query for a deletion involving TP53","text":""},{"location":"generated/requestProfiles_g_variant/#solution-using-g_variant-with-position-range","title":"Solution using <code>g_variant</code> with position range","text":"<p>Query for a deletion involving TP53 using the maximum extent of the gene's coding region (known from somewhere...). The deletion to be found are expected to have an overlap with the queried range; however, the extent of the overlap is not pre-defined (most endpoints woul respond to a recommended \"any\" overlap but this is not a strict requirement imposed by the schema). Here positions refer to chromosome 17 on GRCh38 as indicated by the referenceName RefSeq ID.</p> <p>Recommendation Implementers should provide a mechanism to match any \"deletion\" <code>variantType</code> (<code>EFO:0030067</code>, <code>DEL</code>, <code>SO:0001743</code>) independent of size since operational definitions of <code>CNV</code> vs. <code>INDEL</code> vary, and use explicit <code>variantMinLength</code>, <code>variantMaxLength</code> parameters if needed.</p>"},{"location":"generated/requestProfiles_g_variant/#request_3","title":"Request","text":"<ul> <li> <p><code>referenceName</code>: <code>refseq:NC_0000017.11</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>7669608</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>7676593</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>DEL</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_g_variant/#get-query-string_3","title":"GET query string","text":"<pre><code>?referenceName=refseq:NC_0000017.11&amp;start=7669608&amp;end=7676593&amp;variantType=DEL\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#post-query-component_3","title":"POST query component","text":"<pre><code>{\n    \"end\": [\n        7676593\n    ],\n    \"referenceName\": \"refseq:NC_0000017.11\",\n    \"start\": [\n        7669608\n    ],\n    \"variantType\": \"DEL\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#find-insertion-events-in-tp53-or-in-close-proximity-5000bp","title":"Find insertion events in TP53 or in close proximity (\u00b1~5000bp)","text":""},{"location":"generated/requestProfiles_g_variant/#solution-using-g_variant-with-position-range-bv2rangerequest","title":"Solution using <code>g_variant</code> with position range (<code>BV2rangeRequest</code>)","text":"<p>For this query the mapping position of TP53 (17:7669607-7676593) has to be known. Usually this knowledge would be provided by a front end helper and the aditional padding added manually or w/ a helper field (if frequent scenario) and the beacon itself would just receive the positional range request.</p> <p>The \"insertion\" type is here provided through the Sequence Ontology term <code>SO:0000667</code> and for the chromosome the full, prefixed RefSeq term is being used.</p>"},{"location":"generated/requestProfiles_g_variant/#request_4","title":"Request","text":"<ul> <li> <p><code>referenceName</code>: <code>refseq:NC_0000017.11</code> </p> </li> <li> <p><code>start</code>:     </p> <ul> <li><code>7664000</code> </li> </ul> </li> <li> <p><code>end</code>:     </p> <ul> <li><code>7682000</code> </li> </ul> </li> <li> <p><code>variantType</code>: <code>SO:0000667</code> </p> </li> </ul>"},{"location":"generated/requestProfiles_g_variant/#get-query-string_4","title":"GET query string","text":"<pre><code>?referenceName=refseq:NC_0000017.11&amp;start=7664000&amp;end=7682000&amp;variantType=SO:0000667\n</code></pre>"},{"location":"generated/requestProfiles_g_variant/#post-query-component_4","title":"POST query component","text":"<pre><code>{\n    \"end\": [\n        7682000\n    ],\n    \"referenceName\": \"refseq:NC_0000017.11\",\n    \"start\": [\n        7664000\n    ],\n    \"variantType\": \"SO:0000667\"\n}\n</code></pre>"},{"location":"generated/requestProfiles_geneIdRequest/","title":"Request Profile: <code>geneIdRequest</code>","text":"<p>A typical Beacon v2.n request for gene queries, e.g. for the retrieval of all variants in a gene or variants restricted by additional parameters such <code>variantType</code> or length of the affected sequence. TODO: Evaluate to split into more basic <code>GeneIdRequest</code> and specialized       requests requiring an effect component. There is already a type for       a <code>molecularEffectRequest</code> - see also notes there.</p>"},{"location":"generated/requestProfiles_genomicAlleleShortFormRequest/","title":"Request Profile: <code>genomicAlleleShortFormRequest</code>","text":""},{"location":"generated/requestProfiles_molecularEffectRequest/","title":"Request Profile: <code>molecularEffectRequest</code>","text":"<p>A request for the variation consequence, e.g. for the molecular changes caused by the variant. TODO: Define a clear structure for how request types are constructed with       a primacy of where the variant is located or what happens. </p>"},{"location":"generated/requestProfiles_variantIdRequest/","title":"Request Profile: <code>variantIdRequest</code>","text":"<p>A typical Beacon v2 request for matching variations by their <code>variantId</code>. This request is used to retrieve a specific variant by its identifier.</p>"},{"location":"query-types/","title":"Query Types","text":"<p>Genomic variation queries can be implemented through combinations of different parameters, as available through the given data model. Beacon v2's variation query parameters are defined in the <code>genomicVariations</code> default model's requestParameters schema. As part of the 2024 Beacon Variant Scouts we work on a revison and potential extension of the available parameters, as well as on the definition of canonical Query Types tailored to the retrieval of defined Variant Types.</p>"},{"location":"query-types/#beacon-v2-default-model-queries","title":"Beacon v2 Default Model Queries","text":""},{"location":"query-types/#sequence-queries-variantsequencerequest","title":"Sequence Queries: <code>VariantSequenceRequest</code><sup>1</sup>","text":"<p>Sequence Queries query for the existence of a specified sequence at a given genomic position. Such queries roughly correspond to Beacon v1 queries and are used to match short, precisely defined genomic variants such as SNVs, MNVs and INDELs.</p>"},{"location":"query-types/#range-queries-variantrangerequest","title":"Range Queries: <code>VariantRangeRequest</code><sup>1</sup>","text":"<p>Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by <code>referenceName</code>, <code>start</code> and <code>end</code> parameters.</p> <ul> <li>Documentation: VariantRangeRequest</li> <li>Schema: <code>VariantRangeRequest.yaml</code></li> </ul>"},{"location":"query-types/#bracket-queries-cnv-queries-variantbracketrequest","title":"Bracket Queries (\"CNV queries\"): <code>VariantBracketRequest</code><sup>1</sup>","text":"<p>Bracket Queries allow the specification of sequence ranges for both start and end positions of a genomic variation. The typical example here is the query for similar structural variants - particularly CNVs - affecting a genomic region but potentially differing in their exact extents.</p> <ul> <li>Documentation: VariantBracketRequest</li> <li>Schema: <code>VariantBracketRequest.yaml</code></li> </ul>"},{"location":"query-types/#geneid-queries-generequest","title":"GeneId Queries: <code>GeneRequest</code><sup>1</sup>","text":"<p>GeneId Queries are in essence a variation of Range Queries in which the coordinates are replaced by the HGNC gene symbol. It is left to the implementation if the matching is done on variants annotated for the gene symbol or if a positional translation is being applied.</p>"},{"location":"query-types/#aminoacid-change-queries-aminoacidrequest","title":"Aminoacid Change Queries: <code>AminoacidRequest</code><sup>1</sup>","text":"<p>Annotated variants can potentiallyqueried using the single amino acid replacement format. The <code>aminoacidChange</code> parameter may (must?<sup>2</sup>) be combined with e.g. a <code>geneId</code> to increase specificity</p>"},{"location":"query-types/#query-type-proposals","title":"Query Type Proposals","text":"<p>TBD</p> <ol> <li> <p>The names of the request type schemas should be considered \"malleable\".\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>One of the conventions which so far haven't been settled (TBD).\u00a0\u21a9</p> </li> </ol>"},{"location":"query-types/VariantBracketRequest/","title":"<code>VariantBracketRequest</code> (Beacon v2 default model)","text":""},{"location":"query-types/VariantBracketRequest/#description","title":"Description","text":"<p>Bracket Queries allow the specification of sequence ranges for both start and end positions of a genomic variation. The typical example here is the query for similar structural variants - particularly CNVs - affecting a genomic region but potentially differing in their exact base extents.</p> <p></p>"},{"location":"query-types/VariantBracketRequest/#parameters","title":"Parameters","text":"<ul> <li><code>referenceName</code></li> <li><code>start</code> (min) and <code>start</code> (max) - i.e. 2 start parameters</li> <li><code>end</code> (min) and <code>end</code> (max) - i.e. 2 end parameters</li> <li><code>variantType</code> (optional)</li> </ul> <p>Use of <code>start</code> and <code>end</code></p> <p>Bracket queries require the use of two <code>start</code> and <code>end</code> parameters, in contrast to Range Queries.</p> <p>List Parameters in GET Requests</p> <p>Since the direct interpretation of list parameters in queries is not supported by some server environments (e.g. PHP, GO\u2026), list parameters such as <code>start</code> and <code>end</code> should be provided as comma-concatenated strings when using them in GET requests.</p>"},{"location":"query-types/VariantBracketRequest/#examples","title":"Examples","text":""},{"location":"query-types/VariantBracketRequest/#cnv-query-tp53-deletion-query-by-coordinates","title":"CNV Query - TP53 Deletion Query by Coordinates","text":"<p>The following example shows a \"bracket query\" for focal deletions of the TP53 gene locus:</p> <ul> <li>The start of the deletion has to occurr anywhere from approx. 2.5Mb 5' of the CDR start to just before the end of the CDR.</li> <li>The end of the matched CNVs has to be anywhere from the start of the gene locus to approx. 2.5Mb 3' of its end.</li> </ul> <p>This leads to matching of deletion CNVs which have at least some base overlap with the gene locus but are not larger than approx. 5Mb (operational definitions of focality vary between 1 and 5Mb).</p> Beacon v2 GETBeacon v2 POSTBeacon v1Beacon v0.3 <pre><code>?datasetIds=TEST&amp;referenceName=NC_000017.11&amp;variantType=DEL&amp;start=5000000,7676592&amp;end=7669607,10000000\n</code></pre> <pre><code>{\n    \"$schema\":\"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/framework/json/requests/beaconRequestBody.json\",\n    \"meta\": {\n        \"apiVersion\": \"2.0\",\n        \"requestedSchemas\": [\n            {\n                \"entityType\": \"genomicVariation\",\n                \"schema:\": \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/json/beacon-v2-default-model/genomicVariations/defaultSchema.json\"\n            }\n        ]\n    },\n    \"query\": {\n        \"requestParameters\": {\n            \"g_variant\": {\n                \"referenceName\": \"NC_000017.11\",\n                \"start\": [ 5000000, 7676592 ],\n                \"end\": [ 7669607, 10000000 ],\n                \"variantType\": \"DEL\"\n            }\n        }\n    },\n    \"requestedGranularity\": \"record\",\n    \"pagination\": {\n        \"skip\": 0,\n        \"limit\": 5\n    }\n}\n</code></pre> <p>There are optional parameters [<code>datasetIds</code>, <code>filters</code> ...] and also the option to specify the response type (through <code>requestedGranularity</code>) and returned data format (<code>requestedSchemas</code>). Please follow this up in the framework documentation.</p> <pre><code>?assemblyId=GRCh38&amp;referenceName=17&amp;variantType=DEL&amp;start=5000000,7676592&amp;end=7669607,10000000\n</code></pre> <p>CNV query options were only implemented with Beacon v0.4, based on Beacon<sup>+</sup> prototyping.</p>"},{"location":"query-types/VariantBracketRequest/#optional","title":"Optional","text":"<ul> <li><code>datasetIds=__some-dataset-ids__</code></li> <li><code>filters</code> ...</li> </ul>"},{"location":"query-types/VariantBracketRequest/#optional_1","title":"Optional","text":"<ul> <li><code>datasetIds=__some-dataset-ids__</code></li> </ul>"},{"location":"query-types/VariantRangeRequest/","title":"<code>VariantRangeRequest</code> (Beacon v2 default model)","text":""},{"location":"query-types/VariantRangeRequest/#description","title":"Description","text":"<p>Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by <code>reference_name</code>, <code>start</code> and <code>end</code> parameters.</p> <p></p>"},{"location":"query-types/VariantRangeRequest/#parameters","title":"Parameters","text":"<ul> <li><code>referenceName</code></li> <li><code>start</code> (single value)</li> <li><code>end</code> (single value)</li> <li>optional<ul> <li><code>variantType</code> OR <code>alternateBases</code> OR <code>aminoacidChange</code></li> <li><code>variantMinLength</code></li> <li><code>variantMaxLength</code></li> </ul> </li> </ul> <p>Use of <code>start</code> and <code>end</code></p> <p>Range queries require the use of single <code>start</code> and <code>end</code> parameters, in contrast to Bracket Queries.</p>"},{"location":"query-types/VariantRangeRequest/#examples","title":"Examples","text":""},{"location":"query-types/VariantRangeRequest/#any-variant-affecting-eif4a1","title":"Any variant affecting EIF4A1","text":"Beacon v2 GETBeacon v2 POSTBeacon v1Beacon v0.3 <p>RefseqId <code>referenceName</code> (recommended) <pre><code>?referenceName=refseq:NC_000017.11&amp;start=7572837&amp;end=7578641\n</code></pre></p> <p>Chromosome style <code>referenceName</code> (legacy) <pre><code>?assemblyId=GRCh38&amp;referenceName=17&amp;start=7572837&amp;end=7578641\n</code></pre></p> <pre><code>{\n    \"$schema\":\"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/framework/json/requests/beaconRequestBody.json\",\n    \"meta\": {\n        \"apiVersion\": \"2.0\",\n        \"requestedSchemas\": [\n            {\n                \"entityType\": \"genomicVariation\",\n                \"schema:\": \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/json/beacon-v2-default-model/genomicVariations/defaultSchema.json\"\n            }\n        ]\n    },\n    \"query\": {\n        \"requestParameters\": {\n            \"g_variant\":\n                \"referenceName\": \"NC_000017.11\",\n                \"start\": [ 7572837 ],\n                \"end\": [ 7578641 ]\n            }\n        }\n    },\n    \"requestedGranularity\": \"record\",\n    \"pagination\": {\n        \"skip\": 0,\n        \"limit\": 5\n    }\n}\n</code></pre> <p>Range Queries are new to Beacon v2</p> <p>Range Queries are new to Beacon v2</p>"},{"location":"query-types/variantRequestParameters/","title":"Variation Query Parameters","text":"<p>Current Beacon variation query parameters</p> <p>The parameters currently implemented can be looked up in the Beacon v2 default model'e <code>genomicVariations/requestParameters</code>.</p> <p>Quoted text below reflects the v2 definitions, some of which might be subject toc change (e.g. as result of the scouts' process).</p>"},{"location":"query-types/variantRequestParameters/#beacon-v2-variant-request-parameters","title":"Beacon v2 Variant Request Parameters","text":""},{"location":"query-types/variantRequestParameters/#assemblyid","title":"<code>assemblyId</code>","text":"<p>In the original Beacon v2 specification <code>assemblyId</code> parameter refers to the</p> <p>genomic assembly accession and version as RefSqeq assembly accession (e.g. \"GCF_000001405.39\") or a versioned assembly name or synonym such as UCSC Genome Browser assembly (e.g. \"hg38\") or Genome Reference Consortium Human (e.g. GRCh38.p13\") names.</p>"},{"location":"query-types/variantRequestParameters/#scouts-todo","title":"Scouts TODO","text":"<ul> <li>Revise / tighten these definitions since they are highly polymorphic; at least with   a clearly documented preference?</li> <li>Abandon the parameter in lieu of versioned <code>referenceName</code> values? Currently both   are allowed.</li> </ul>"},{"location":"query-types/variantRequestParameters/#referencename","title":"<code>referenceName</code>","text":"<p>The <code>referenceName</code> parameter matches the </p> <p>sequence id for genomic sequence (e.g. chromosome) in which variant coordinates (<code>start</code>, <code>end</code> ...) are given. Preferably a RefSeqId or alternatively common synonymus or aliases.</p>"},{"location":"query-types/variantRequestParameters/#examples","title":"Examples","text":"<ul> <li>refseq:NC_000009.12</li> <li>NC_000009.12</li> <li>Chr9</li> <li>9</li> <li>NC_012920.1</li> </ul>"},{"location":"query-types/variantRequestParameters/#scouts-todo_1","title":"Scouts TODO","text":"<ul> <li>More stringent ID use?</li> <li>New explicit parameter?</li> </ul>"},{"location":"query-types/variantRequestParameters/#matename","title":"<code>mateName</code>","text":"<p>The parameter is used for a sequence id as in the <code>referenceName</code> definitions, for use cases describing a fusion event (to a different or identical chromosome). While the parameter had been defined in the Beacon v2 default model so far there had been no good definition/documentation of use cases (though intuitively there are many practical cases for translocation/fusion events).</p>"},{"location":"query-types/variantRequestParameters/#scouts-todo_2","title":"Scouts TODO","text":"<ul> <li>document use cases</li> <li>define query prototype(s)</li> </ul>"},{"location":"query-types/variantRequestParameters/#start","title":"<code>start</code>","text":"<p>Precise or fuzzy start coordinate position(s) for a variation locus (0-based, inclusive). The use depends on the query type:</p> <ul> <li><code>start</code> only:<ul> <li>for single positions, e.g. the start of a specified sequence alteration where the size is given through the specified <code>alternateBases</code></li> <li>typical use are queries for SNV and small InDels</li> <li>the use of <code>start</code> without an <code>end</code> parameter requires the use of <code>alternateBases</code></li> </ul> </li> <li><code>start</code> and <code>end</code>:<ul> <li>for searching any variant falling fully or partially within the range between <code>start</code> and <code>end</code> (a.k.a. \"range query\")</li> <li>additional use of <code>variantType</code> OR <code>alternateBases</code> can limit the scope of the query</li> <li>by convention, partial overlaps of variants with the indicated genomic range are accepted; for specific overlap requirements the 4-parameter \"Bracket Queries\" should be employed</li> </ul> </li> <li>2 values in both <code>start</code> and <code>end</code> for constructing a \"Bracket Query\":<ul> <li>can be used to match any contiguous genomic interval, e.g. for querying imprecise positions</li> <li>identifies all structural variants starting between <code>start[0]</code> and <code>start[1]</code>, and ending between <code>end[0]</code> &lt;-&gt; <code>end[1]</code></li> <li>single or double sided precise matches can be achieved by setting <code>start[1]=start[0]+1</code> and <code>end[1]=end[0]+1</code></li> </ul> </li> </ul>"},{"location":"query-types/variantRequestParameters/#scouts-todo_3","title":"Scouts TODO","text":"<ul> <li>de-convolute documentation, i.e. move specifics to the query type definitions</li> </ul>"},{"location":"query-types/variantRequestParameters/#end","title":"<code>end</code>","text":"<p>Precise or fuzzy end coordinate position(s) for a variation locus (0-based, inclusive). This is commonly used for variations w/o specified sequence (although e.g. a range and a sequence motif could be combined).</p>"},{"location":"query-types/variantRequestParameters/#scouts-todo_4","title":"Scouts TODO","text":"<ul> <li>as above</li> </ul>"},{"location":"query-types/variantRequestParameters/#alternatebases","title":"<code>alternateBases</code>","text":"<p>Sequence of bases for this variation (starting from <code>start</code>).</p> <ul> <li>Accepted values: [ACGTN]</li> <li>N is a wildcard, that denotes the position of any base and can be used as a standalone base of any type or within a partially known sequence. As example, a query of <code>ANNT</code> the Ns can take take any form of [ACGT] and will match <code>ANNT</code>, <code>ACNT</code>, <code>ACCT</code>, <code>ACGT</code> ... and so forth.</li> <li>an empty value is used in the case of deletions with the maximally trimmed, deleted sequence being indicated in <code>referenceBases</code></li> </ul>"},{"location":"query-types/variantRequestParameters/#scouts-todo_5","title":"Scouts TODO","text":"<ul> <li>resolve ambiguity in schema where also the pattern: <code>^([ACGTUNRYSWKMBDHV\\-\\.]*)$</code>   is given</li> <li>future use of <code>sequence</code> as in VRS?</li> </ul>"},{"location":"query-types/variantRequestParameters/#referencebases","title":"<code>referenceBases</code>","text":"<p>Sequence of bases which have been replaced by the variation (from <code>start</code>). The use of characters is equivalent to the <code>alternateBases</code> parameter.</p>"},{"location":"query-types/variantRequestParameters/#scouts-todo_6","title":"Scouts TODO","text":"<ul> <li>determine if <code>referenceBases</code> should be abandoned ...</li> </ul>"},{"location":"query-types/variantRequestParameters/#varianttype","title":"<code>variantType</code>","text":"<p>The <code>variantType</code> is used to query variants which are not defined through a sequence of one or more bases using the <code>alternateBases</code> parameter or through an alternative query type using non-sequence parameters (e.g. <code>aminoacidChange</code>).</p> <p>The Beacon v2 schema uses some \"VCF-like\" examples w/o being prescriptive:</p> <p>Examples here are e.g. structural variants:</p> <ul> <li>DUP<ul> <li>increased allelic count of material from the genomic region between   <code>start</code> and <code>end</code> positions</li> <li>no assumption about the placement of the additional sequences is being   made (i.e. no in situ requirement as tandem duplications)</li> </ul> </li> <li>DEL: deletion of sequence following <code>start</code></li> <li>BND: breakend, i.e. termination of the allele at position <code>start</code> or in the <code>startMin</code> =&gt; <code>startMax</code> interval, or fusion of the sequence to distant partner</li> </ul> <p>Either <code>alternateBases</code> or <code>variantType</code> is required, with the exception of range queries (single <code>start</code> and <code>end</code> parameters).</p>"},{"location":"query-types/variantRequestParameters/#scouts-todo_7","title":"Scouts TODO","text":"<ul> <li>revise regarding the preferential use of CURIEs (i.e. EFO or SO classes), as   has been exemplified in the Beacon v2 documentation   for CNVs</li> <li>revise/delete notes about parameter combinations which should be moved to the   query type definitions</li> </ul>"},{"location":"query-types/variantRequestParameters/#variantminlength","title":"<code>variantMinLength</code>","text":"<ul> <li>Minimum length in bases of a genomic variant</li> <li>This is an optional parameter without prescribed use. While a length is commonly   available for structural variants such as copy number variations, it is recommended   that length based queries should also be supported for variants with indicated    eferenceBases and alternateBases, to enable length-specific wildcard queries.</li> </ul>"},{"location":"query-types/variantRequestParameters/#scouts-todo_8","title":"Scouts TODO","text":"<ul> <li>check definition</li> </ul>"},{"location":"query-types/variantRequestParameters/#variantmaxlength","title":"<code>variantMaxLength</code>","text":"<ul> <li>Maximum length in bases of a genomic variant.</li> <li>otherwise as above</li> </ul>"},{"location":"query-types/variantRequestParameters/#geneid","title":"<code>geneId</code>","text":"<ul> <li>A gene identifier</li> <li>It is suggested to use a symbol following the HGNC (www.genenames.org)   nomenclature.</li> </ul>"},{"location":"query-types/variantRequestParameters/#examples_1","title":"Examples","text":"<ul> <li>BRAF</li> <li>SCN5A</li> </ul>"},{"location":"query-types/variantRequestParameters/#scouts-todo_9","title":"Scouts TODO","text":"<ul> <li>check definition</li> <li>compare to VRS where prefixed identifiers are required instead of gene symbols</li> </ul>"},{"location":"query-types/variantRequestParameters/#aminoacidchange","title":"<code>aminoacidChange</code>","text":"<p>An aminoacid alteration in 1 letter format.</p>"},{"location":"query-types/variantRequestParameters/#examples_2","title":"Examples","text":"<ul> <li>V600E</li> <li>M734V</li> </ul>"},{"location":"query-types/variantRequestParameters/#scouts-todo_10","title":"Scouts TODO","text":"<ul> <li>check definition</li> </ul>"},{"location":"query-types/variantRequestParameters/#genomicalleleshortform","title":"<code>genomicAlleleShortForm</code>","text":"<p>A genomic HGVSId descriptor.</p>"},{"location":"query-types/variantRequestParameters/#examples_3","title":"Examples","text":"<ul> <li>NM_004006.2:c.4375C&gt;T</li> </ul>"},{"location":"query-types/variantRequestParameters/#scouts-todo_11","title":"Scouts TODO","text":"<ul> <li>expand definition and examples</li> </ul>"}]}