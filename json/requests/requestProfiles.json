{
    "$defs": {
        "BV2alleleRequest": {
            "properties": {
                "alternateBases": {
                    "$ref": "./requestParameterComponents.json#/$defs/AlternateBases"
                },
                "assemblyId": {
                    "$ref": "./requestParameterComponents.json#/$defs/Assembly"
                },
                "referenceBases": {
                    "$ref": "./requestParameterComponents.json#/$defs/ReferenceBases"
                },
                "referenceName": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefSeqId"
                },
                "requestProfile": {
                    "const": "BV2alleleRequest",
                    "description": "Note: The `requestProfile` parameter had not been defined for Beacon v2.0\nand therefore in _senso stricto_ is not part of requests only relying\non v2 parameters."
                },
                "start": {
                    "$ref": "./requestParameterComponents.json#/$defs/Start"
                }
            },
            "required": [
                "referenceName",
                "start",
                "alternateBases"
            ],
            "type": "object"
        },
        "BV2bracketRequest": {
            "description": "A typical Beacon v2 request for matching variations where start and end\nfall in a genomic range. Here, the approximate or varying positions for\nvariation start and end are queried through brackets, _i.e._ by using 2\nvalues for `start` and `end` each. This is a typical scenario in querying\nfor CNVs where the `variantType` parameter indicates the relative change in\ngenomic copy number through either VCF derived string parameters\nor, preferably, EFO terms (pls. refer to the class definition.)\nSince a bracket request is a positional query for varying sequence extend\nno `sequence` parameter should be used.",
            "properties": {
                "assemblyId": {
                    "$ref": "./requestParameterComponents.json#/$defs/Assembly"
                },
                "end": {
                    "$ref": "./requestParameterComponents.json#/$defs/End"
                },
                "referenceName": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefSeqId"
                },
                "requestProfile": {
                    "const": "BV2bracketRequest"
                },
                "start": {
                    "$ref": "./requestParameterComponents.json#/$defs/Start"
                },
                "variantMaxLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMaxLength"
                },
                "variantMinLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMinLength"
                },
                "variantType": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantType"
                }
            },
            "required": [
                "referenceName",
                "start",
                "end",
                "variantType"
            ],
            "type": "object"
        },
        "BV2multivarsRequest": {
            "description": "This multi variant query is a collection of individual variant queries\nbased on the Beacon v2 parameters (`g_variant`).\nStatus: Proposed for evaluation for Beacon v2.n or v3.0 (but potentially\n        skipped in favor of the `VQSmultivarRequest` queries).",
            "properties": {
                "queries": {
                    "items": {
                        "$ref": "#/$defs/g_variant"
                    },
                    "type": "array"
                },
                "requestProfile": {
                    "const": "BV2multivarsRequest"
                },
                "variantLogic": {
                    "default": "AND",
                    "description": "The logic to apply to the set of variants in the query. The default is\nto apply the AND logic, meaning that all **samples** (i.e. biosamples,\nindividuals or analyses) must fulfil the query criteria:\n* with a (default) AND logic and \"biosamples\" as requested entity \n  `biosample_id` values from the individual variant query responses\n  will be intersected\n* with an OR logic and \"analyses\" as requested entity `analysis_id`\n  values from the individual variant query responses will be concatenated\nNote: The `variantLogic` parameter is not defined in the current\n      `requestParameterComponents.yaml` file yet due to the very experimental\n      and tentative nature of this proposal.",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BV2rangeRequest": {
            "description": "Beacon Range Queries are supposed to return matches of any variant with at\nleast partial overlap of the sequence range specified by `referenceName`,\n`start` and end `parameters`. Additional qualifiers such as `variantType`\nor length of the affected sequence can be used to further restrict the\nreturned results.\nFor this request type `start` and `end` with a single position are used,\n_i.e._ a subset of the `start` and `end` specifications.",
            "properties": {
                "assemblyId": {
                    "$ref": "./requestParameterComponents.json#/$defs/Assembly"
                },
                "end": {
                    "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "integer"
                    },
                    "type": "array"
                },
                "referenceName": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefSeqId"
                },
                "requestProfile": {
                    "const": "BV2rangeRequest"
                },
                "start": {
                    "items": {
                        "maxItems": 1,
                        "minItems": 1,
                        "type": "integer"
                    },
                    "type": "array"
                },
                "variantMaxLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMaxLength"
                },
                "variantMinLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMinLength"
                },
                "variantType": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantType"
                }
            },
            "required": [
                "referenceName",
                "start",
                "end"
            ],
            "type": "object"
        },
        "VQSadjacencyRequest": {
            "description": "A typical Beacon v2.n request for sequence adjacency queries, e.g. for\nthe retrieval of chromosomal translocation events or sequence fusions.\n\nTODO: In VRS v2 there is an implicit sequence directionality from the use\nof either start or end parameters for either side of the adjacency. This\nmight be problematic on the query side where in many instances just the\napproximate position of the (fused) breakpoints maight be of interest.\n\nThis might need additional clarification (e.g. use of `startRange` or\n`endRange`, `adjacencyStartRange` and `adjecencyEndRange` parameters to\nindicate direction dependent matching).",
            "properties": {
                "adjacencyAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/AdjacencyAccession"
                },
                "adjacencyRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefgetAccession"
                },
                "requestProfile": {
                    "const": "VQSadjacencyRequest"
                },
                "sequenceRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "vrsType": {
                    "const": "Adjacency"
                }
            },
            "required": [
                "requestProfile",
                "referenceAccession",
                "sequenceRange",
                "adjacencyAccession",
                "adjacencyRange",
                "vrsType"
            ],
            "type": "object"
        },
        "VQSalleleRequest": {
            "description": "A Beacon v2+ sequence query. It is in its scope similar to the Beacon v1/v2\nallele requests but replaces the original parameters with VRS v2 concepts.",
            "properties": {
                "end": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceEnd"
                },
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefgetAccession"
                },
                "requestProfile": {
                    "const": "VQSalleleRequest"
                },
                "sequence": {
                    "$ref": "./requestParameterComponents.json#/$defs/Sequence"
                },
                "start": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceStart"
                },
                "vrsType": {
                    "const": "Allele"
                }
            },
            "required": [
                "referenceAccession",
                "start",
                "sequence"
            ],
            "type": "object"
        },
        "VQScopyChangeRequest": {
            "description": "A typical Beacon v2.n request for copy number variations (CNVs) queries\napproximate positions for CNV start and end regions through use of the\n`Range` type. The `copyChange` parameter indicates the relative change in\ngenomic copy number (pls. refer to the class definition.)",
            "properties": {
                "copyChange": {
                    "$ref": "./requestParameterComponents.json#/$defs/CopyChange"
                },
                "endRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefgetAccession"
                },
                "requestProfile": {
                    "const": "VQScopyChangeRequest"
                },
                "sequenceLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceLength"
                },
                "startRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "vrsType": {
                    "const": "CopyNumberChange"
                }
            },
            "required": [
                "requestProfile",
                "referenceAccession",
                "startRange",
                "endRange",
                "copyChange"
            ],
            "type": "object"
        },
        "VQSgeneIdRequest": {
            "description": "A typical Beacon v2.n request for gene queries, e.g. for the retrieval of\nall variants in a gene or variants restricted by additional parameters\nsuch as CNV type (`copyChange`) or length of the affected sequence.\nTODO: Evaluate to split into more basic `GeneIdRequest` and specialized\n      requests requiring an effect component.",
            "properties": {
                "clinicalRelevance": {
                    "$ref": "./requestParameterComponents.json#/$defs/clinicalRelevance"
                },
                "copyChange": {
                    "$ref": "./requestParameterComponents.json#/$defs/CopyChange"
                },
                "geneId": {
                    "$ref": "./requestParameterComponents.json#/$defs/GeneId"
                },
                "molecularEffect": {
                    "$ref": "./requestParameterComponents.json#/$defs/molecularEffect"
                },
                "requestProfile": {
                    "const": "VQSgeneIdRequest"
                },
                "sequenceLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceLength"
                },
                "vrsType": {
                    "$ref": "./requestParameterComponents.json#/$defs/VRStype"
                }
            },
            "required": [
                "geneId"
            ],
            "type": "object"
        },
        "VQSgeneMolecularEffectRequest": {
            "description": "A request for the variation consequence, e.g. for the _molecular_ changes\ncaused by the variant.\n\n##### TODO\n\n* Define a clear structure for how request types are constructed with a\n  primacy of *where* the variant is located or *what* happens. ",
            "properties": {
                "geneId": {
                    "$ref": "./requestParameterComponents.json#/$defs/GeneId"
                },
                "molecularEffect": {
                    "$ref": "./requestParameterComponents.json#/$defs/MolecularEffect"
                },
                "requestProfile": {
                    "const": "VQSgeneMolecularEffectRequest"
                }
            },
            "required": [
                "requestProfile",
                "molecularEffect"
            ],
            "type": "object"
        },
        "VQSlocationMolecularEffectRequest": {
            "description": "A request for the variation consequence, e.g. for the _molecular_ changes\ncaused by the variant, at a genomic location defined through coordinates.",
            "properties": {
                "molecularEffect": {
                    "$ref": "./requestParameterComponents.json#/$defs/MolecularEffect"
                },
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefSeqId"
                },
                "requestProfile": {
                    "const": "VQSlocationMolecularEffectRequest"
                },
                "sequenceRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                }
            },
            "required": [
                "requestProfile",
                "referenceAccession"
            ],
            "type": "object"
        },
        "VQSmultivarRequest": {
            "description": "This multi variant query is a collection of individual variant queries\nbased on the Beacon v2+ \"VQS\" query patterns.\nStatus: Proposed for evaluation for Beacon v2.n or v3.0",
            "properties": {
                "queries": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/$defs/VQSalleleRequest"
                            },
                            {
                                "$ref": "#/$defs/VQScopyChangeRequest"
                            },
                            {
                                "$ref": "#/$defs/VQSadjacencyRequest"
                            },
                            {
                                "$ref": "#/$defs/VQSgeneIdRequest"
                            },
                            {
                                "$ref": "#/$defs/BV2variantIdRequest"
                            },
                            {
                                "$ref": "#/$defs/BV2aminoacidChangeRequest"
                            },
                            {
                                "$ref": "#/$defs/BV2genomicAlleleShortFormRequest"
                            }
                        ]
                    },
                    "type": "array"
                },
                "requestProfile": {
                    "const": "VQSmultivarRequest"
                },
                "variantLogic": {
                    "default": "AND",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VQSrangeRequest": {
            "description": "Beacon Range Queries are supposed to return matches of any variant with at\nleast partial overlap of the sequence range specified by `referenceAccession`,\n`start` and `end` parameters. Additional qualifiers such as `copyChange`\nor length of the affected sequence can be used to further restrict the\nreturned results.\nFor this request type usually `start` and `end` with a single position are used,\n_i.e._ a subset of the `start` and `end` specifications. However, \n\n##### TODO\n\n* Evaluate to split into more basic `RangeRequest` and specialized\n  requests requiring an effect component\n* Review current VRS v2 and upcoming versions for optoions to express\n  types of variants beyond the `copyChange` parameter",
            "properties": {
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefSeqId"
                },
                "requestProfile": {
                    "const": "VQSrangeRequest"
                },
                "sequenceLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceLength"
                },
                "sequenceRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "vrsType": {
                    "$ref": "./requestParameterComponents.json#/$defs/VRStype"
                }
            },
            "required": [
                "requestProfile",
                "referenceAccession",
                "sequenceRange"
            ],
            "type": "object"
        },
        "VQSrequest": {
            "description": "The `VQSrequest` type represents the generic collection of variant parameters\nsupported in Beacon v2+ requests. These include parameters with close alignment\nto VRS v2 concepts and replacing some Beacon v1/v2 generics with tighter\ndefinitions (e.g. `referenceAccession` instead of `referenceName` and `accession`\nor `copyChange` for a specific subset of former `variantType` values) but also\nkeep some conceptsm beyond VRS scope or specifically geared towards query\napplications (`geneId`, `sequenceLength`)",
            "properties": {
                "adjacencyAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/AdjacencyAccession"
                },
                "adjacencyRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "aminoacidChange": {
                    "$ref": "./requestParameterComponents.json#/$defs/AminoacidChange"
                },
                "copyChange": {
                    "$ref": "./requestParameterComponents.json#/$defs/CopyChange"
                },
                "endPos": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceEnd"
                },
                "endRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "geneId": {
                    "$ref": "./requestParameterComponents.json#/$defs/GeneId"
                },
                "genomicAlleleShortForm": {
                    "$ref": "./requestParameterComponents.json#/$defs/GenomicAlleleShortForm"
                },
                "genomicFeature": {
                    "$ref": "./requestParameterComponents.json#/$defs/GenomicFeature"
                },
                "molecularEffect": {
                    "$ref": "./requestParameterComponents.json#/$defs/MolecularEffect"
                },
                "phenoClinicEffect": {
                    "$ref": "./requestParameterComponents.json#/$defs/PhenoClinicEffect"
                },
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefgetAccession"
                },
                "repeatSubunitCount": {
                    "$ref": "./requestParameterComponents.json#/$defs/RepeatSubunitCount"
                },
                "repeatSubunitLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/RepeatSubunitLength"
                },
                "requestProfile": {
                    "$ref": "./requestParameterComponents.json#/$defs/RequestProfileId"
                },
                "sequence": {
                    "$ref": "./requestParameterComponents.json#/$defs/Sequence"
                },
                "sequenceLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceLength"
                },
                "startPos": {
                    "$ref": "./requestParameterComponents.json#/$defs/SequenceStart"
                },
                "startRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "vrsType": {
                    "$ref": "./requestParameterComponents.json#/$defs/VRStype"
                }
            },
            "type": "object"
        },
        "VQSsequenceRepeatRequest": {
            "description": "A Beacon v2.n request for sequence repeat queries, e.g. for the\nretrieval of tandem repeat expansions or other sequence repeat events.",
            "properties": {
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefgetAccession"
                },
                "repeatSubunitCount": {
                    "$ref": "./requestParameterComponents.json#/$defs/RepeatSubunitCount"
                },
                "repeatSubunitLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/RepeatSubunitLength"
                },
                "requestProfile": {
                    "const": "VQSsequenceRepeatRequest"
                },
                "sequenceRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "vrsType": {
                    "const": "SequenceRepeat"
                }
            },
            "required": [
                "requestProfile",
                "referenceAccession",
                "sequenceRange",
                "vrsType"
            ],
            "type": "object"
        },
        "VQSterminusRequest": {
            "description": "A Beacon v2.n request for a sequence terminus, _i.e._ the end of a sequence.\nAn example would be the match of chromosomal breakpoints terminating the\nderived chromosome w/o resulting sequence fusion.\n\nTODO: As in adjacency requests one could use `startRange` or `endRange`\nto limit the side of the breakpoint.",
            "properties": {
                "referenceAccession": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefgetAccession"
                },
                "requestProfile": {
                    "const": "VQSterminusRequest"
                },
                "sequenceRange": {
                    "$ref": "./requestParameterComponents.json#/$defs/Range"
                },
                "vrsType": {
                    "const": "Terminus"
                }
            },
            "required": [
                "requestProfile",
                "referenceAccession",
                "sequenceRange",
                "vrsType"
            ],
            "type": "object"
        },
        "aminoacidChangeRequest": {
            "description": "A Beacon v2 request for amino acid change queries, e.g. for the\nretrieval of all variants leading to specific amino acid change. The request\nmay be restricted by additionally providing the gene ID.",
            "properties": {
                "aminoacidChange": {
                    "$ref": "./requestParameterComponents.json#/$defs/AminoacidChange"
                },
                "geneId": {
                    "$ref": "./requestParameterComponents.json#/$defs/GeneId"
                },
                "requestProfile": {
                    "const": "BV2aminoacidChangeRequest"
                }
            },
            "required": [
                "aminoacidChange"
            ],
            "type": "object"
        },
        "g_variant": {
            "description": "This represents the generic collection of variant parameters allowed in\nBeacon v2 requests.",
            "examples": {
                "$ref": "../examples/g_variant.json#/examples"
            },
            "properties": {
                "alternateBases": {
                    "$ref": "./requestParameterComponents.json#/$defs/AlternateBases"
                },
                "aminoacidChange": {
                    "$ref": "./requestParameterComponents.json#/$defs/AminoacidChange"
                },
                "assemblyId": {
                    "$ref": "./requestParameterComponents.json#/$defs/Assembly"
                },
                "end": {
                    "$ref": "./requestParameterComponents.json#/$defs/End"
                },
                "geneId": {
                    "$ref": "./requestParameterComponents.json#/$defs/GeneId"
                },
                "genomicAlleleShortForm": {
                    "$ref": "./requestParameterComponents.json#/$defs/GenomicAlleleShortForm"
                },
                "referenceBases": {
                    "$ref": "./requestParameterComponents.json#/$defs/ReferenceBases"
                },
                "referenceName": {
                    "$ref": "./requestParameterComponents.json#/$defs/RefSeqId"
                },
                "start": {
                    "$ref": "./requestParameterComponents.json#/$defs/Start"
                },
                "variantMaxLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMaxLength"
                },
                "variantMinLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMinLength"
                },
                "variantType": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantType"
                }
            },
            "type": "object"
        },
        "geneIdRequest": {
            "description": "A typical Beacon v2.n request for gene queries, e.g. for the retrieval of\nall variants in a gene or variants restricted by additional parameters\nsuch `variantType` or length of the affected sequence.\nTODO: Evaluate to split into more basic `GeneIdRequest` and specialized\n      requests requiring an effect component. There is already a type for\n      a `molecularEffectRequest` - see also notes there.",
            "properties": {
                "geneId": {
                    "$ref": "./requestParameterComponents.json#/$defs/GeneId"
                },
                "requestProfile": {
                    "const": "geneIdRequest"
                },
                "variantMaxLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMaxLength"
                },
                "variantMinLength": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantMinLength"
                }
            },
            "required": [
                "geneId"
            ],
            "type": "object"
        },
        "genomicAlleleShortFormRequest": {
            "properties": {
                "genomicAlleleShortForm": {
                    "$ref": "./requestParameterComponents.json#/$defs/GenomicAlleleShortForm"
                }
            },
            "type": "object"
        },
        "variantIdRequest": {
            "description": "A typical Beacon v2 request for matching variations by their `variantId`.\nThis request is used to retrieve a specific variant by its identifier.",
            "properties": {
                "requestProfile": {
                    "const": "BV2variantIdRequest"
                },
                "variantId": {
                    "$ref": "./requestParameterComponents.json#/$defs/VariantId"
                }
            },
            "type": "object"
        }
    },
    "$schema": "https://json-schema.org/draft/2020-12/schema"
}